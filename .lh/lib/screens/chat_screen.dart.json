{
    "sourceFile": "lib/screens/chat_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 53,
            "patches": [
                {
                    "date": 1628084931641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1628895547942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:firebase_core/firebase_core.dart';\n import 'package:flutter/material.dart';\n import 'package:flash_chat/constants.dart';\n \n class ChatScreen extends StatefulWidget {\n@@ -7,8 +9,23 @@\n   _ChatScreenState createState() => _ChatScreenState();\n }\n \n class _ChatScreenState extends State<ChatScreen> {\n+  //make variable for logged in user\n+  User loggedIn;\n+  final _auth = FirebaseAuth.instance;\n+  // method for get last successful e-mail signed-in\n+  void getCurrentUser() async {\n+    try {\n+      final currentUser = await _auth.currentUser;\n+      if (currentUser != null) {\n+        print(loggedIn.email);\n+      }\n+    } catch (e) {\n+      print(e);\n+    }\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n"
                },
                {
                    "date": 1629123909659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:firebase_core/firebase_core.dart';\n import 'package:flutter/material.dart';\n import 'package:flash_chat/constants.dart';\n@@ -9,33 +10,64 @@\n   _ChatScreenState createState() => _ChatScreenState();\n }\n \n class _ChatScreenState extends State<ChatScreen> {\n+  // store our messages\n+  String messageText;\n+  final _fireStore = FirebaseFirestore.instance;\n+\n   //make variable for logged in user\n   User loggedIn;\n   final _auth = FirebaseAuth.instance;\n   // method for get last successful e-mail signed-in\n   void getCurrentUser() async {\n     try {\n-      final currentUser = await _auth.currentUser;\n-      if (currentUser != null) {\n-        print(loggedIn.email);\n+      loggedIn = _auth.currentUser;\n+      if (loggedIn != null) {\n+        print('done' + loggedIn.email.toString());\n       }\n     } catch (e) {\n       print(e);\n     }\n   }\n \n+// make method\n+  void getMessages() async {\n+    /// get first collection reference then get this collection\n+    /// Snapshot is the result of the Future or Stream you are listening to in your FutureBuilder.\n+    final message = await _fireStore.collection('messages').get();\n+    // to get all document in collection\n+    for (var snapShot in message.docs) {\n+      // get data in this document\n+      print(snapShot.data());\n+    }\n+  }\n+\n   @override\n+  void initState() {\n+    getCurrentUser();\n+    super.initState();\n+  }\n+\n+  @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n         leading: null,\n         actions: <Widget>[\n           IconButton(\n               icon: Icon(Icons.close),\n-              onPressed: () {\n+              onPressed: () async {\n+                getMessages();\n                 //Implement logout functionality\n+                // try {\n+                //   await _auth.signOut();\n+                //   if (_auth.currentUser == null) {\n+                //     Navigator.pop(context);\n+                //   }\n+                // } catch (e) {\n+                //   print(e);\n+                // }\n               }),\n         ],\n         title: Text('⚡️Chat'),\n         backgroundColor: Colors.lightBlueAccent,\n@@ -53,15 +85,19 @@\n                   Expanded(\n                     child: TextField(\n                       onChanged: (value) {\n                         //Do something with the user input.\n+                        messageText = value;\n                       },\n                       decoration: kMessageTextFieldDecoration,\n                     ),\n                   ),\n                   FlatButton(\n-                    onPressed: () {\n+                    onPressed: () async {\n                       //Implement send functionality.\n+                      await _fireStore\n+                          .collection('messages')\n+                          .add({'text': messageText, 'sender': loggedIn.email});\n                     },\n                     child: Text(\n                       'Send',\n                       style: kSendButtonTextStyle,\n"
                },
                {
                    "date": 1629124491749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:firebase_core/firebase_core.dart';\n import 'package:flutter/material.dart';\n import 'package:flash_chat/constants.dart';\n \n class ChatScreen extends StatefulWidget {\n"
                },
                {
                    "date": 1629125759441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,26 +28,37 @@\n       print(e);\n     }\n   }\n \n-// make method\n+// // make method\n   void getMessages() async {\n     /// get first collection reference then get this collection\n     /// Snapshot is the result of the Future or Stream you are listening to in your FutureBuilder.\n-    final message = await _fireStore.collection('messages').get();\n+    final snapShot = await _fireStore.collection('messages').get();\n     // to get all document in collection\n-    for (var snapShot in message.docs) {\n+    for (var message in snapShot.docs) {\n       // get data in this document\n-      print(snapShot.data());\n+      print(message.data());\n     }\n-  }\n+//   }\n \n   @override\n   void initState() {\n     getCurrentUser();\n     super.initState();\n   }\n \n+  /// to listen to stream of data\n+  /// notify for any new messages\n+  void messageStream() async{\n+    // notify all documents in this collection\n+     await for( var snapShot in _fireStore.collection('messages').snapshots()){\n+       for(var message in snapShot.docs ){\n+\n+       }\n+     };\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n"
                },
                {
                    "date": 1629125793505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,11 @@\n   /// notify for any new messages\n   void messageStream() async{\n     // notify all documents in this collection\n      await for( var snapShot in _fireStore.collection('messages').snapshots()){\n+       // return all docs\n        for(var message in snapShot.docs ){\n-\n+         print(message.data());\n        }\n      };\n   }\n \n"
                },
                {
                    "date": 1629125880774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,17 +29,17 @@\n     }\n   }\n \n // // make method\n-  void getMessages() async {\n-    /// get first collection reference then get this collection\n-    /// Snapshot is the result of the Future or Stream you are listening to in your FutureBuilder.\n-    final snapShot = await _fireStore.collection('messages').get();\n-    // to get all document in collection\n-    for (var message in snapShot.docs) {\n-      // get data in this document\n-      print(message.data());\n-    }\n+  // void getMessages() async {\n+  //   /// get first collection reference then get this collection\n+  //   /// Snapshot is the result of the Future or Stream you are listening to in your FutureBuilder.\n+  //   final snapShot = await _fireStore.collection('messages').get();\n+  //   // to get all document in collection\n+  //   for (var message in snapShot.docs) {\n+  //     // get data in this document\n+  //     print(message.data());\n+  //   }\n //   }\n \n   @override\n   void initState() {\n@@ -48,16 +48,16 @@\n   }\n \n   /// to listen to stream of data\n   /// notify for any new messages\n-  void messageStream() async{\n+  void messageStream() async {\n     // notify all documents in this collection\n-     await for( var snapShot in _fireStore.collection('messages').snapshots()){\n-       // return all docs\n-       for(var message in snapShot.docs ){\n-         print(message.data());\n-       }\n-     };\n+    await for (var snapShot in _fireStore.collection('messages').snapshots()) {\n+      // return all docs\n+      for (var message in snapShot.docs) {\n+        print(message.data());\n+      }\n+    }\n   }\n \n   @override\n   Widget build(BuildContext context) {\n@@ -67,9 +67,9 @@\n         actions: <Widget>[\n           IconButton(\n               icon: Icon(Icons.close),\n               onPressed: () async {\n-                getMessages();\n+                messageStream();\n                 //Implement logout functionality\n                 // try {\n                 //   await _auth.signOut();\n                 //   if (_auth.currentUser == null) {\n"
                },
                {
                    "date": 1629126025771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n         leading: null,\n         actions: <Widget>[\n           IconButton(\n               icon: Icon(Icons.close),\n-              onPressed: () async {\n+              onPressed: () {\n                 messageStream();\n                 //Implement logout functionality\n                 // try {\n                 //   await _auth.signOut();\n"
                },
                {
                    "date": 1633184003713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,17 +13,18 @@\n   // store our messages\n   String messageText;\n   final _fireStore = FirebaseFirestore.instance;\n \n-  //make variable for logged in user\n+  //make variable to hold current usr for logged in user\n   User loggedIn;\n   final _auth = FirebaseAuth.instance;\n   // method for get last successful e-mail signed-in\n   void getCurrentUser() async {\n     try {\n-      loggedIn = _auth.currentUser;\n-      if (loggedIn != null) {\n-        print('done' + loggedIn.email.toString());\n+      final user = _auth.currentUser;\n+      if (user != null) {\n+        loggedIn = user;\n+        print('done' + user.email.toString());\n       }\n     } catch (e) {\n       print(e);\n     }\n"
                },
                {
                    "date": 1633285292418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   _ChatScreenState createState() => _ChatScreenState();\n }\n \n class _ChatScreenState extends State<ChatScreen> {\n-  // store our messages\n+  // store our messages get from user\n   String messageText;\n   final _fireStore = FirebaseFirestore.instance;\n \n   //make variable to hold current usr for logged in user\n@@ -50,8 +50,11 @@\n \n   /// to listen to stream of data\n   /// notify for any new messages\n   void messageStream() async {\n+    final mss =  _fireStore.collection('messages').doc() .get();\n+   print\n+\n     // notify all documents in this collection\n     await for (var snapShot in _fireStore.collection('messages').snapshots()) {\n       // return all docs\n       for (var message in snapShot.docs) {\n@@ -68,8 +71,10 @@\n         actions: <Widget>[\n           IconButton(\n               icon: Icon(Icons.close),\n               onPressed: () {\n+                final user = _auth.signOut();\n+                if (user != null) print('done');\n                 messageStream();\n                 //Implement logout functionality\n                 // try {\n                 //   await _auth.signOut();\n@@ -96,9 +101,9 @@\n                 children: <Widget>[\n                   Expanded(\n                     child: TextField(\n                       onChanged: (value) {\n-                        //Do something with the user input.\n+                        //get input text from user\n                         messageText = value;\n                       },\n                       decoration: kMessageTextFieldDecoration,\n                     ),\n"
                },
                {
                    "date": 1633287540712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,18 @@\n \n   /// to listen to stream of data\n   /// notify for any new messages\n   void messageStream() async {\n-    final mss =  _fireStore.collection('messages').doc() .get();\n-   print\n+    // another way to listen to streams\n+    // _fireStore.collection('collectionPath').snapshots().listen((event) {\n+    //   for (var e in event.docs) {\n+    //     print(e.data());\n+    //   }\n+    // });\n \n     // notify all documents in this collection\n+    // snapshot return stream so we want one query --> use for each\n+    // then we want only doc --> use another for each\n     await for (var snapShot in _fireStore.collection('messages').snapshots()) {\n       // return all docs\n       for (var message in snapShot.docs) {\n         print(message.data());\n"
                },
                {
                    "date": 1633424473083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,35 @@\n         child: Column(\n           mainAxisAlignment: MainAxisAlignment.spaceBetween,\n           crossAxisAlignment: CrossAxisAlignment.stretch,\n           children: <Widget>[\n+            // stream- -> that where data comes from\n+            // builder build stargey --> provide the logic for the stream should actually do\n+            // each update will provide an Async snap shot which the most interaction with stream\n+            StreamBuilder<QuerySnapshot>(\n+              stream: _fireStore.collection('messages').snapshots(),\n+              builder: (context, snapshot) {\n+                // now we have access to context and snap shot that contain streams\n+                // this snap shot cntain Query Snap Shot from fire base\n+                // to specify what kind of returnded data --> make stream builder of Query Snap Shot\n+                final messages = snapshot.data.docs;\n+                // return list of Query Document Snap Shot\n+                // so we must iterate in it to get all its elemnts\n+                List<Text> listWidget = [];\n+                for (var message in messages) {\n+                  final mapData = message.data() as Map<String, dynamic>;\n+                  final messageText = mapData['text'];\n+                  final messageSnder = mapData['sender'];\n+                  final textWidget = Text('$messageText from $messageSnder');\n+                  // then add it to list\n+                  listWidget.add(textWidget);\n+                }\n+\n+                return Column(\n+                  children: listWidget,\n+                );\n+              },\n+            ),\n             Container(\n               decoration: kMessageContainerDecoration,\n               child: Row(\n                 crossAxisAlignment: CrossAxisAlignment.center,\n"
                },
                {
                    "date": 1633445525439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,14 @@\n             // each update will provide an Async snap shot which the most interaction with stream\n             StreamBuilder<QuerySnapshot>(\n               stream: _fireStore.collection('messages').snapshots(),\n               builder: (context, snapshot) {\n+                if (!snapshot.hasData) {\n+                  return Center(\n+                      child: CircularProgressIndicator(\n+                    backgroundColor: Colors.blueAccent,\n+                  ));\n+                }\n                 // now we have access to context and snap shot that contain streams\n                 // this snap shot cntain Query Snap Shot from fire base\n                 // to specify what kind of returnded data --> make stream builder of Query Snap Shot\n                 final messages = snapshot.data.docs;\n"
                },
                {
                    "date": 1633445539998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n               builder: (context, snapshot) {\n                 if (!snapshot.hasData) {\n                   return Center(\n                       child: CircularProgressIndicator(\n-                    backgroundColor: Colors.blueAccent,\n+                    backgroundColor: Colors.lightBlueAccent,\n                   ));\n                 }\n                 // now we have access to context and snap shot that contain streams\n                 // this snap shot cntain Query Snap Shot from fire base\n"
                },
                {
                    "date": 1633446695509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,10 @@\n                   // then add it to list\n                   listWidget.add(textWidget);\n                 }\n \n-                return Column(\n+                return ListView(\n+                  padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),\n                   children: listWidget,\n                 );\n               },\n             ),\n@@ -167,4 +168,11 @@\n       ),\n     );\n   }\n }\n+\n+class MessageBubble extends StatelessWidget {\n+  @override\n+  Widget build(BuildContext context) {\n+    return Container();\n+  }\n+}\n"
                },
                {
                    "date": 1633447149788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,16 +122,21 @@\n                 for (var message in messages) {\n                   final mapData = message.data() as Map<String, dynamic>;\n                   final messageText = mapData['text'];\n                   final messageSnder = mapData['sender'];\n-                  final textWidget = Text('$messageText from $messageSnder');\n+                  final textWidget = MessageBubble(\n+                    mText: messageText,\n+                    mSender: messageSnder,\n+                  );\n                   // then add it to list\n                   listWidget.add(textWidget);\n                 }\n \n-                return ListView(\n-                  padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),\n-                  children: listWidget,\n+                return Expanded(\n+                  child: ListView(\n+                    padding: EdgeInsets.symmetric(horizontal: 5, vertical: 10),\n+                    children: listWidget,\n+                  ),\n                 );\n               },\n             ),\n             Container(\n@@ -170,9 +175,12 @@\n   }\n }\n \n class MessageBubble extends StatelessWidget {\n+  // provide text and sender\n+  final String mText, mSender;\n+  MessageBubble({this.mText, this.mSender});\n   @override\n   Widget build(BuildContext context) {\n-    return Container();\n+    return Text('');\n   }\n }\n"
                },
                {
                    "date": 1633458375989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,25 +117,23 @@\n                 // to specify what kind of returnded data --> make stream builder of Query Snap Shot\n                 final messages = snapshot.data.docs;\n                 // return list of Query Document Snap Shot\n                 // so we must iterate in it to get all its elemnts\n-                List<Text> listWidget = [];\n+                List<MessageBubble> BubbleWidgets = [];\n                 for (var message in messages) {\n                   final mapData = message.data() as Map<String, dynamic>;\n                   final messageText = mapData['text'];\n                   final messageSnder = mapData['sender'];\n-                  final textWidget = MessageBubble(\n-                    mText: messageText,\n-                    mSender: messageSnder,\n-                  );\n+\n                   // then add it to list\n-                  listWidget.add(textWidget);\n+                  BubbleWidgets.add(\n+                      MessageBubble(mText: messageText, mSender: messageSnder));\n                 }\n \n                 return Expanded(\n                   child: ListView(\n                     padding: EdgeInsets.symmetric(horizontal: 5, vertical: 10),\n-                    children: listWidget,\n+                    children: BubbleWidgets,\n                   ),\n                 );\n               },\n             ),\n@@ -176,8 +174,9 @@\n }\n \n class MessageBubble extends StatelessWidget {\n   // provide text and sender\n+  // make them final to be intialize once at conxtructor\n   final String mText, mSender;\n   MessageBubble({this.mText, this.mSender});\n   @override\n   Widget build(BuildContext context) {\n"
                },
                {
                    "date": 1633458464632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,7 +179,9 @@\n   final String mText, mSender;\n   MessageBubble({this.mText, this.mSender});\n   @override\n   Widget build(BuildContext context) {\n-    return Text('');\n+    // to change background of text\n+    // wrap it in material\n+    return Material(color: Colors.lightBlue, child: Text(''));\n   }\n }\n"
                },
                {
                    "date": 1633461548738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,14 +105,14 @@\n             // each update will provide an Async snap shot which the most interaction with stream\n             StreamBuilder<QuerySnapshot>(\n               stream: _fireStore.collection('messages').snapshots(),\n               builder: (context, snapshot) {\n-                if (!snapshot.hasData) {\n-                  return Center(\n-                      child: CircularProgressIndicator(\n-                    backgroundColor: Colors.lightBlueAccent,\n-                  ));\n-                }\n+                // if (!snapshot.hasData) {\n+                //   return Center(\n+                //       child: CircularProgressIndicator(\n+                //     backgroundColor: Colors.lightBlueAccent,\n+                //   ));\n+                // }\n                 // now we have access to context and snap shot that contain streams\n                 // this snap shot cntain Query Snap Shot from fire base\n                 // to specify what kind of returnded data --> make stream builder of Query Snap Shot\n                 final messages = snapshot.data.docs;\n"
                },
                {
                    "date": 1633461956142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,14 +105,15 @@\n             // each update will provide an Async snap shot which the most interaction with stream\n             StreamBuilder<QuerySnapshot>(\n               stream: _fireStore.collection('messages').snapshots(),\n               builder: (context, snapshot) {\n-                // if (!snapshot.hasData) {\n-                //   return Center(\n-                //       child: CircularProgressIndicator(\n-                //     backgroundColor: Colors.lightBlueAccent,\n-                //   ));\n-                // }\n+                if (!snapshot.hasData) {\n+                  return Center(\n+                      child: CircularProgressIndicator(\n+                    backgroundColor: Colors.lightBlueAccent,\n+                  ));\n+                }\n+\n                 // now we have access to context and snap shot that contain streams\n                 // this snap shot cntain Query Snap Shot from fire base\n                 // to specify what kind of returnded data --> make stream builder of Query Snap Shot\n                 final messages = snapshot.data.docs;\n"
                },
                {
                    "date": 1633521498710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,7 +182,8 @@\n   @override\n   Widget build(BuildContext context) {\n     // to change background of text\n     // wrap it in material\n-    return Material(color: Colors.lightBlue, child: Text(''));\n+    return Material(\n+        color: Colors.lightBlue, child: Text('ssssssssssssssssssss'));\n   }\n }\n"
                },
                {
                    "date": 1633522503806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n                   final messageSnder = mapData['sender'];\n \n                   // then add it to list\n                   BubbleWidgets.add(\n-                      MessageBubble(mText: messageText, mSender: messageSnder));\n+                      MessageBubble(mText: \"ss\", mSender: \"gg@gmail.com\"));\n                 }\n \n                 return Expanded(\n                   child: ListView(\n"
                },
                {
                    "date": 1633523091797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n                   final messageSnder = mapData['sender'];\n \n                   // then add it to list\n                   BubbleWidgets.add(\n-                      MessageBubble(mText: \"ss\", mSender: \"gg@gmail.com\"));\n+                      MessageBubble(mText: messageText, mSender: messageSnder));\n                 }\n \n                 return Expanded(\n                   child: ListView(\n"
                },
                {
                    "date": 1633523478247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,7 @@\n   @override\n   Widget build(BuildContext context) {\n     // to change background of text\n     // wrap it in material\n-    return Material(\n-        color: Colors.lightBlue, child: Text('ssssssssssssssssssss'));\n+    return Material(color: Colors.lightBlue, child: Text(mText + mSender));\n   }\n }\n"
                },
                {
                    "date": 1633523746295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,7 +182,9 @@\n   @override\n   Widget build(BuildContext context) {\n     // to change background of text\n     // wrap it in material\n-    return Material(color: Colors.lightBlue, child: Text(mText + mSender));\n+    return Padding(\n+        padding: EdgeInsets.symmetric(horizontal: 20),\n+        child: Material(color: Colors.lightBlue, child: Text(mText + mSender)));\n   }\n }\n"
                },
                {
                    "date": 1633523758239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,8 +183,8 @@\n   Widget build(BuildContext context) {\n     // to change background of text\n     // wrap it in material\n     return Padding(\n-        padding: EdgeInsets.symmetric(horizontal: 20),\n+        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n         child: Material(color: Colors.lightBlue, child: Text(mText + mSender)));\n   }\n }\n"
                },
                {
                    "date": 1633523798909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,14 @@\n   @override\n   Widget build(BuildContext context) {\n     // to change background of text\n     // wrap it in material\n-    return Padding(\n-        padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-        child: Material(color: Colors.lightBlue, child: Text(mText + mSender)));\n+    return Column(\n+      children: [\n+        Padding(\n+            padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+            child: Material(\n+                color: Colors.lightBlue, child: Text(mText + mSender))),\n+      ],\n+    );\n   }\n }\n"
                },
                {
                    "date": 1633523816875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,8 +183,9 @@\n   Widget build(BuildContext context) {\n     // to change background of text\n     // wrap it in material\n     return Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n       children: [\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n             child: Material(\n"
                },
                {
                    "date": 1633523830411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,8 +184,9 @@\n     // to change background of text\n     // wrap it in material\n     return Column(\n       mainAxisAlignment: MainAxisAlignment.start,\n+      crossAxisAlignment: CrossAxisAlignment.start,\n       children: [\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n             child: Material(\n"
                },
                {
                    "date": 1633523865313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,8 +186,9 @@\n     return Column(\n       mainAxisAlignment: MainAxisAlignment.start,\n       crossAxisAlignment: CrossAxisAlignment.start,\n       children: [\n+        Text(mText),\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n             child: Material(\n                 color: Colors.lightBlue, child: Text(mText + mSender))),\n"
                },
                {
                    "date": 1633523879768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,13 +186,12 @@\n     return Column(\n       mainAxisAlignment: MainAxisAlignment.start,\n       crossAxisAlignment: CrossAxisAlignment.start,\n       children: [\n-        Text(mText),\n+        Text(mSender),\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-            child: Material(\n-                color: Colors.lightBlue, child: Text(mText + mSender))),\n+            child: Material(color: Colors.lightBlue, child: Text(mText))),\n       ],\n     );\n   }\n }\n"
                },
                {
                    "date": 1633523920964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,14 @@\n       children: [\n         Text(mSender),\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-            child: Material(color: Colors.lightBlue, child: Text(mText))),\n+            child: Material(\n+                color: Colors.lightBlue,\n+                child: Text(\n+                  mText,\n+                  style: TextStyle(fontSize: 15),\n+                ))),\n       ],\n     );\n   }\n }\n"
                },
                {
                    "date": 1633523932368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n             child: Material(\n                 color: Colors.lightBlue,\n                 child: Text(\n                   mText,\n-                  style: TextStyle(fontSize: 15),\n+                  style: TextStyle(fontSize: 25),\n                 ))),\n       ],\n     );\n   }\n"
                },
                {
                    "date": 1633523937843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n             child: Material(\n                 color: Colors.lightBlue,\n                 child: Text(\n                   mText,\n-                  style: TextStyle(fontSize: 25),\n+                  style: TextStyle(fontSize: 20),\n                 ))),\n       ],\n     );\n   }\n"
                },
                {
                    "date": 1633523967825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,12 @@\n     return Column(\n       mainAxisAlignment: MainAxisAlignment.start,\n       crossAxisAlignment: CrossAxisAlignment.start,\n       children: [\n-        Text(mSender),\n+        Text(\n+          mSender,\n+          style: TextStyle(fontSize: 10),\n+        ),\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n             child: Material(\n                 color: Colors.lightBlue,\n"
                },
                {
                    "date": 1633524031991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,8 +193,9 @@\n         ),\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n             child: Material(\n+                borderRadius: BorderRadius.circular(10),\n                 color: Colors.lightBlue,\n                 child: Text(\n                   mText,\n                   style: TextStyle(fontSize: 20),\n"
                },
                {
                    "date": 1633524075000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n                 borderRadius: BorderRadius.circular(10),\n                 color: Colors.lightBlue,\n                 child: Text(\n                   mText,\n-                  style: TextStyle(fontSize: 20),\n+                  style: TextStyle(fontSize: 20, color: Colors.white),\n                 ))),\n       ],\n     );\n   }\n"
                },
                {
                    "date": 1633524119833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,8 +193,9 @@\n         ),\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n             child: Material(\n+                elevation: 5,\n                 borderRadius: BorderRadius.circular(10),\n                 color: Colors.lightBlue,\n                 child: Text(\n                   mText,\n"
                },
                {
                    "date": 1633524196992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,8 +157,9 @@\n                       //Implement send functionality.\n                       await _fireStore\n                           .collection('messages')\n                           .add({'text': messageText, 'sender': loggedIn.email});\n+                      messageText = '';\n                     },\n                     child: Text(\n                       'Send',\n                       style: kSendButtonTextStyle,\n"
                },
                {
                    "date": 1633524256456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,9 @@\n                     child: TextField(\n                       onChanged: (value) {\n                         //get input text from user\n                         messageText = value;\n+                        value = '';\n                       },\n                       decoration: kMessageTextFieldDecoration,\n                     ),\n                   ),\n@@ -157,9 +158,8 @@\n                       //Implement send functionality.\n                       await _fireStore\n                           .collection('messages')\n                           .add({'text': messageText, 'sender': loggedIn.email});\n-                      messageText = '';\n                     },\n                     child: Text(\n                       'Send',\n                       style: kSendButtonTextStyle,\n"
                },
                {
                    "date": 1633524283710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,8 @@\n                     child: TextField(\n                       onChanged: (value) {\n                         //get input text from user\n                         messageText = value;\n-                        value = '';\n                       },\n                       decoration: kMessageTextFieldDecoration,\n                     ),\n                   ),\n"
                },
                {
                    "date": 1633524316034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,9 +191,9 @@\n           mSender,\n           style: TextStyle(fontSize: 10),\n         ),\n         Padding(\n-            padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+            padding: EdgeInsets.symmetric(horizontal: 20, vertical: 50),\n             child: Material(\n                 elevation: 5,\n                 borderRadius: BorderRadius.circular(10),\n                 color: Colors.lightBlue,\n"
                },
                {
                    "date": 1633524323319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,9 +191,9 @@\n           mSender,\n           style: TextStyle(fontSize: 10),\n         ),\n         Padding(\n-            padding: EdgeInsets.symmetric(horizontal: 20, vertical: 50),\n+            padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n             child: Material(\n                 elevation: 5,\n                 borderRadius: BorderRadius.circular(10),\n                 color: Colors.lightBlue,\n"
                },
                {
                    "date": 1633524353932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,11 +196,14 @@\n             child: Material(\n                 elevation: 5,\n                 borderRadius: BorderRadius.circular(10),\n                 color: Colors.lightBlue,\n-                child: Text(\n-                  mText,\n-                  style: TextStyle(fontSize: 20, color: Colors.white),\n+                child: Padding(\n+                  padding: EdgeInsets.all(10),\n+                  child: Text(\n+                    mText,\n+                    style: TextStyle(fontSize: 20, color: Colors.white),\n+                  ),\n                 ))),\n       ],\n     );\n   }\n"
                },
                {
                    "date": 1633524363480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n             child: Material(\n                 elevation: 5,\n-                borderRadius: BorderRadius.circular(10),\n+                borderRadius: BorderRadius.circular(15),\n                 color: Colors.lightBlue,\n                 child: Padding(\n                   padding: EdgeInsets.all(10),\n                   child: Text(\n"
                },
                {
                    "date": 1633524375050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n             child: Material(\n                 elevation: 5,\n-                borderRadius: BorderRadius.circular(15),\n+                borderRadius: BorderRadius.circular(20),\n                 color: Colors.lightBlue,\n                 child: Padding(\n                   padding: EdgeInsets.all(10),\n                   child: Text(\n"
                },
                {
                    "date": 1633524390443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,9 +191,9 @@\n           mSender,\n           style: TextStyle(fontSize: 10),\n         ),\n         Padding(\n-            padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+            padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),\n             child: Material(\n                 elevation: 5,\n                 borderRadius: BorderRadius.circular(20),\n                 color: Colors.lightBlue,\n"
                },
                {
                    "date": 1633527681783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n     // to change background of text\n     // wrap it in material\n     return Column(\n       mainAxisAlignment: MainAxisAlignment.start,\n-      crossAxisAlignment: CrossAxisAlignment.start,\n+      crossAxisAlignment: CrossAxisAlignment.end,\n       children: [\n         Text(\n           mSender,\n           style: TextStyle(fontSize: 10),\n"
                },
                {
                    "date": 1633528152957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n         Padding(\n             padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),\n             child: Material(\n                 elevation: 5,\n-                borderRadius: BorderRadius.circular(20),\n+                borderRadius: BorderRadius.circular(30),\n                 color: Colors.lightBlue,\n                 child: Padding(\n                   padding: EdgeInsets.all(10),\n                   child: Text(\n"
                },
                {
                    "date": 1633528989051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:flash_chat/componnt/message_bubble.dart';\n+import 'package:flash_chat/componnt/message_stream.dart';\n import 'package:flutter/material.dart';\n import 'package:flash_chat/constants.dart';\n \n class ChatScreen extends StatefulWidget {\n@@ -102,42 +104,10 @@\n           children: <Widget>[\n             // stream- -> that where data comes from\n             // builder build stargey --> provide the logic for the stream should actually do\n             // each update will provide an Async snap shot which the most interaction with stream\n-            StreamBuilder<QuerySnapshot>(\n-              stream: _fireStore.collection('messages').snapshots(),\n-              builder: (context, snapshot) {\n-                if (!snapshot.hasData) {\n-                  return Center(\n-                      child: CircularProgressIndicator(\n-                    backgroundColor: Colors.lightBlueAccent,\n-                  ));\n-                }\n-\n-                // now we have access to context and snap shot that contain streams\n-                // this snap shot cntain Query Snap Shot from fire base\n-                // to specify what kind of returnded data --> make stream builder of Query Snap Shot\n-                final messages = snapshot.data.docs;\n-                // return list of Query Document Snap Shot\n-                // so we must iterate in it to get all its elemnts\n-                List<MessageBubble> BubbleWidgets = [];\n-                for (var message in messages) {\n-                  final mapData = message.data() as Map<String, dynamic>;\n-                  final messageText = mapData['text'];\n-                  final messageSnder = mapData['sender'];\n-\n-                  // then add it to list\n-                  BubbleWidgets.add(\n-                      MessageBubble(mText: messageText, mSender: messageSnder));\n-                }\n-\n-                return Expanded(\n-                  child: ListView(\n-                    padding: EdgeInsets.symmetric(horizontal: 5, vertical: 10),\n-                    children: BubbleWidgets,\n-                  ),\n-                );\n-              },\n+            MessageStram(\n+              fireStore: _fireStore,\n             ),\n             Container(\n               decoration: kMessageContainerDecoration,\n               child: Row(\n@@ -172,39 +142,4 @@\n       ),\n     );\n   }\n }\n-\n-class MessageBubble extends StatelessWidget {\n-  // provide text and sender\n-  // make them final to be intialize once at conxtructor\n-  final String mText, mSender;\n-  MessageBubble({this.mText, this.mSender});\n-  @override\n-  Widget build(BuildContext context) {\n-    // to change background of text\n-    // wrap it in material\n-    return Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      children: [\n-        Text(\n-          mSender,\n-          style: TextStyle(fontSize: 10),\n-        ),\n-        Padding(\n-            padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),\n-            child: Material(\n-                elevation: 5,\n-                borderRadius: BorderRadius.circular(30),\n-                color: Colors.lightBlue,\n-                child: Padding(\n-                  padding: EdgeInsets.all(10),\n-                  child: Text(\n-                    mText,\n-                    style: TextStyle(fontSize: 20, color: Colors.white),\n-                  ),\n-                ))),\n-      ],\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1633529197316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flash_chat/componnt/message_bubble.dart';\n import 'package:flash_chat/componnt/message_stream.dart';\n import 'package:flutter/material.dart';\n import 'package:flash_chat/constants.dart';\n \n@@ -104,8 +103,9 @@\n           children: <Widget>[\n             // stream- -> that where data comes from\n             // builder build stargey --> provide the logic for the stream should actually do\n             // each update will provide an Async snap shot which the most interaction with stream\n+            /// refactor it in another widget\n             MessageStram(\n               fireStore: _fireStore,\n             ),\n             Container(\n"
                },
                {
                    "date": 1633530593312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,22 @@\n   _ChatScreenState createState() => _ChatScreenState();\n }\n \n class _ChatScreenState extends State<ChatScreen> {\n+  @override\n+  void dispose() {\n+    super.dispose();\n+    // remove textController if not used to release resources\n+    // Clean up the controller when the widget is removed from the\n+    // widget tree.\n+    _textSendController.dispose();\n+  }\n+\n+  /// make edit text Controller\n+  // Create a text controller. Later, use it to retrieve the\n+  // current value of the TextField.\n+  final _textSendController = TextEditingController();\n+\n   // store our messages get from user\n   String messageText;\n   final _fireStore = FirebaseFirestore.instance;\n \n@@ -114,8 +128,9 @@\n                 crossAxisAlignment: CrossAxisAlignment.center,\n                 children: <Widget>[\n                   Expanded(\n                     child: TextField(\n+                      controller: _textSendController,\n                       onChanged: (value) {\n                         //get input text from user\n                         messageText = value;\n                       },\n"
                },
                {
                    "date": 1633530841621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n \n   @override\n   void initState() {\n     getCurrentUser();\n+\n     super.initState();\n   }\n \n   /// to listen to stream of data\n@@ -138,8 +139,9 @@\n                     ),\n                   ),\n                   FlatButton(\n                     onPressed: () async {\n+                      _textSendController.clear();\n                       //Implement send functionality.\n                       await _fireStore\n                           .collection('messages')\n                           .add({'text': messageText, 'sender': loggedIn.email});\n"
                },
                {
                    "date": 1633533133659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,9 @@\n             // each update will provide an Async snap shot which the most interaction with stream\n             /// refactor it in another widget\n             MessageStram(\n               fireStore: _fireStore,\n+              logIn: loggedIn,\n             ),\n             Container(\n               decoration: kMessageContainerDecoration,\n               child: Row(\n"
                }
            ],
            "date": 1628084931641,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:flash_chat/constants.dart';\n\nclass ChatScreen extends StatefulWidget {\n  static const String id = 'chat_screen';\n  @override\n  _ChatScreenState createState() => _ChatScreenState();\n}\n\nclass _ChatScreenState extends State<ChatScreen> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: null,\n        actions: <Widget>[\n          IconButton(\n              icon: Icon(Icons.close),\n              onPressed: () {\n                //Implement logout functionality\n              }),\n        ],\n        title: Text('⚡️Chat'),\n        backgroundColor: Colors.lightBlueAccent,\n      ),\n      body: SafeArea(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          crossAxisAlignment: CrossAxisAlignment.stretch,\n          children: <Widget>[\n            Container(\n              decoration: kMessageContainerDecoration,\n              child: Row(\n                crossAxisAlignment: CrossAxisAlignment.center,\n                children: <Widget>[\n                  Expanded(\n                    child: TextField(\n                      onChanged: (value) {\n                        //Do something with the user input.\n                      },\n                      decoration: kMessageTextFieldDecoration,\n                    ),\n                  ),\n                  FlatButton(\n                    onPressed: () {\n                      //Implement send functionality.\n                    },\n                    child: Text(\n                      'Send',\n                      style: kSendButtonTextStyle,\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
        }
    ]
}