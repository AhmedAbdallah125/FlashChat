{
    "sourceFile": "lib/screens/registration_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1628084997161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1628088684152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,14 @@\n         child: Column(\n           mainAxisAlignment: MainAxisAlignment.center,\n           crossAxisAlignment: CrossAxisAlignment.stretch,\n           children: <Widget>[\n-            Container(\n-              height: 200.0,\n-              child: Image.asset('images/logo.png'),\n+            Hero(\n+              tag: 'logo',\n+              child: Container(\n+                height: 200.0,\n+                child: Image.asset('images/logo.png'),\n+              ),\n             ),\n             SizedBox(\n               height: 48.0,\n             ),\n"
                },
                {
                    "date": 1628423338961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:flash_chat/componnt/rounded_button.dart';\n import 'package:flutter/material.dart';\n \n class RegistrationScreen extends StatefulWidget {\n   static const String id = 'registration_screen';\n@@ -75,27 +76,15 @@\n             ),\n             SizedBox(\n               height: 24.0,\n             ),\n-            Padding(\n-              padding: EdgeInsets.symmetric(vertical: 16.0),\n-              child: Material(\n-                color: Colors.blueAccent,\n-                borderRadius: BorderRadius.all(Radius.circular(30.0)),\n-                elevation: 5.0,\n-                child: MaterialButton(\n-                  onPressed: () {\n-                    //Implement registration functionality.\n-                  },\n-                  minWidth: 200.0,\n-                  height: 42.0,\n-                  child: Text(\n-                    'Register',\n-                    style: TextStyle(color: Colors.white),\n-                  ),\n-                ),\n-              ),\n-            ),\n+            RoundedButton(\n+              color: Colors.blueAccent,\n+              title: 'Register',\n+              onpressed: () {\n+                //Implement registration functionality.\n+              },\n+            )\n           ],\n         ),\n       ),\n     );\n"
                },
                {
                    "date": 1628430315158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:flash_chat/componnt/rounded_button.dart';\n+import 'package:flash_chat/constants.dart';\n import 'package:flutter/material.dart';\n \n class RegistrationScreen extends StatefulWidget {\n   static const String id = 'registration_screen';\n@@ -53,28 +54,13 @@\n             SizedBox(\n               height: 8.0,\n             ),\n             TextField(\n-              onChanged: (value) {\n-                //Do something with the user input.\n-              },\n-              decoration: InputDecoration(\n-                hintText: 'Enter your password',\n-                contentPadding:\n-                    EdgeInsets.symmetric(vertical: 10.0, horizontal: 20.0),\n-                border: OutlineInputBorder(\n-                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n-                ),\n-                enabledBorder: OutlineInputBorder(\n-                  borderSide: BorderSide(color: Colors.blueAccent, width: 1.0),\n-                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n-                ),\n-                focusedBorder: OutlineInputBorder(\n-                  borderSide: BorderSide(color: Colors.blueAccent, width: 2.0),\n-                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n-                ),\n-              ),\n-            ),\n+                onChanged: (value) {\n+                  //Do something with the user input.\n+                },\n+                decoration: KTextFieldDecoration.copyWith(\n+                    hintText: 'Enter your password')),\n             SizedBox(\n               height: 24.0,\n             ),\n             RoundedButton(\n"
                },
                {
                    "date": 1628430482803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n             TextField(\n                 onChanged: (value) {\n                   //Do something with the user input.\n                 },\n+                // override by using copy with\n                 decoration: KTextFieldDecoration.copyWith(\n                     hintText: 'Enter your password')),\n             SizedBox(\n               height: 24.0,\n"
                },
                {
                    "date": 1628757440704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,15 @@\n   _RegistrationScreenState createState() => _RegistrationScreenState();\n }\n \n class _RegistrationScreenState extends State<RegistrationScreen> {\n+  /// make variable to save our data\n+  String email;\n+  String password;\n+\n+  /// for securing or not in text field\n+  bool secure = true;\n+  IconData iconPassword = Icons.remove_red_eye;\n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       backgroundColor: Colors.white,\n@@ -26,32 +33,23 @@\n                 height: 200.0,\n                 child: Image.asset('images/logo.png'),\n               ),\n             ),\n-            SizedBox(\n+            const SizedBox(\n               height: 48.0,\n             ),\n             TextField(\n-              onChanged: (value) {\n-                //Do something with the user input.\n-              },\n-              decoration: InputDecoration(\n-                hintText: 'Enter your email',\n-                contentPadding:\n-                    EdgeInsets.symmetric(vertical: 10.0, horizontal: 20.0),\n-                border: OutlineInputBorder(\n-                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n-                ),\n-                enabledBorder: OutlineInputBorder(\n-                  borderSide: BorderSide(color: Colors.blueAccent, width: 1.0),\n-                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n-                ),\n-                focusedBorder: OutlineInputBorder(\n-                  borderSide: BorderSide(color: Colors.blueAccent, width: 2.0),\n-                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n-                ),\n-              ),\n-            ),\n+ textAlign: TextAlign.center,\n+                      keyboardType: TextInputType.emailAddress,\n+                      onChanged: (value) {\n+                        //Do something with the user input.\n+                        email = value;\n+                /// calling when user make a change in the field\n+                onChanged: (value) {\n+                  //Do something with the user input.\n+                },\n+                decoration: kMessageTextFieldDecoration.copyWith(\n+                    hintText: 'Enter your email')),\n             SizedBox(\n               height: 8.0,\n             ),\n             TextField(\n"
                },
                {
                    "date": 1628757462016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,16 +37,13 @@\n             const SizedBox(\n               height: 48.0,\n             ),\n             TextField(\n- textAlign: TextAlign.center,\n-                      keyboardType: TextInputType.emailAddress,\n-                      onChanged: (value) {\n-                        //Do something with the user input.\n-                        email = value;\n-                /// calling when user make a change in the field\n+                textAlign: TextAlign.center,\n+                keyboardType: TextInputType.emailAddress,\n                 onChanged: (value) {\n                   //Do something with the user input.\n+                  email = value;\n                 },\n                 decoration: kMessageTextFieldDecoration.copyWith(\n                     hintText: 'Enter your email')),\n             SizedBox(\n"
                },
                {
                    "date": 1628757489659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,13 @@\n             SizedBox(\n               height: 8.0,\n             ),\n             TextField(\n+                obscureText: secure,\n+                textAlign: TextAlign.center,\n                 onChanged: (value) {\n                   //Do something with the user input.\n+                  password = value;\n                 },\n                 // override by using copy with\n                 decoration: KTextFieldDecoration.copyWith(\n                     hintText: 'Enter your password')),\n"
                },
                {
                    "date": 1628757805483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:flash_chat/componnt/rounded_button.dart';\n import 'package:flash_chat/constants.dart';\n import 'package:flutter/material.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n \n class RegistrationScreen extends StatefulWidget {\n   static const String id = 'registration_screen';\n \n@@ -9,8 +10,12 @@\n   _RegistrationScreenState createState() => _RegistrationScreenState();\n }\n \n class _RegistrationScreenState extends State<RegistrationScreen> {\n+  /// make instance of authentication\n+  /// make it final because it will not change\n+  final _auth = FirebaseAuth.instance;\n+\n   /// make variable to save our data\n   String email;\n   String password;\n \n"
                },
                {
                    "date": 1628757908596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n               color: Colors.blueAccent,\n               title: 'Register',\n               onpressed: () {\n                 //Implement registration functionality.\n+                _auth.createUserWithEmailAndPassword(email: email, password: password)\n               },\n             )\n           ],\n         ),\n"
                },
                {
                    "date": 1628758012365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,15 @@\n               color: Colors.blueAccent,\n               title: 'Register',\n               onpressed: () {\n                 //Implement registration functionality.\n-                _auth.createUserWithEmailAndPassword(email: email, password: password)\n+                /// try create users and handle thrown exception\n+                try {\n+                  _auth.createUserWithEmailAndPassword(\n+                      email: email, password: password);\n+                } catch (e) {\n+                  print(e);\n+                }\n               },\n             )\n           ],\n         ),\n"
                },
                {
                    "date": 1628758868291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,11 @@\n               title: 'Register',\n               onpressed: () {\n                 //Implement registration functionality.\n                 /// try create users and handle thrown exception\n+                /// because of unvalid email or other thing\n+                /// then return of this method is future so  we use async and await\n+                /// put them in variable of type final  because it will not change\n                 try {\n                   _auth.createUserWithEmailAndPassword(\n                       email: email, password: password);\n                 } catch (e) {\n"
                },
                {
                    "date": 1628762368614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,16 +69,16 @@\n             ),\n             RoundedButton(\n               color: Colors.blueAccent,\n               title: 'Register',\n-              onpressed: () {\n+              onpressed: () async {\n                 //Implement registration functionality.\n                 /// try create users and handle thrown exception\n                 /// because of unvalid email or other thing\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n-                  _auth.createUserWithEmailAndPassword(\n+                  await _auth.createUserWithEmailAndPassword(\n                       email: email, password: password);\n                 } catch (e) {\n                   print(e);\n                 }\n"
                },
                {
                    "date": 1628765743259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                 onChanged: (value) {\n                   //Do something with the user input.\n                   email = value;\n                 },\n-                decoration: kMessageTextFieldDecoration.copyWith(\n+                decoration: KTextFieldDecoration.copyWith(\n                     hintText: 'Enter your email')),\n             SizedBox(\n               height: 8.0,\n             ),\n"
                },
                {
                    "date": 1628765920410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n \n class _RegistrationScreenState extends State<RegistrationScreen> {\n   /// make instance of authentication\n   /// make it final because it will not change\n+  /// privat so other classes cant accidently change it\n   final _auth = FirebaseAuth.instance;\n \n   /// make variable to save our data\n   String email;\n"
                },
                {
                    "date": 1628766028395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n                 /// because of unvalid email or other thing\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n-                  await _auth.createUserWithEmailAndPassword(\n+                  final newUser = await _auth.createUserWithEmailAndPassword(\n                       email: email, password: password);\n                 } catch (e) {\n                   print(e);\n                 }\n"
                },
                {
                    "date": 1628766083434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n                 try {\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n                       email: email, password: password);\n                 } catch (e) {\n-                  print(e);\n+                  print(e + '55555555555555555');\n                 }\n               },\n             )\n           ],\n"
                },
                {
                    "date": 1628766112568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n                 try {\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n                       email: email, password: password);\n                 } catch (e) {\n-                  print(e + '55555555555555555');\n+                  print(e.toString() + '55555555555555555');\n                 }\n               },\n             )\n           ],\n"
                },
                {
                    "date": 1628766178417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,11 +79,10 @@\n                 /// put them in variable of type final  because it will not change\n                 try {\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n                       email: email, password: password);\n-                } catch (e) {\n-                  print(e.toString() + '55555555555555555');\n-                }\n+                  if (newUser != null) print('object');\n+                } catch (e) {}\n               },\n             )\n           ],\n         ),\n"
                },
                {
                    "date": 1628766232445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,11 @@\n                 try {\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n                       email: email, password: password);\n                   if (newUser != null) print('object');\n-                } catch (e) {}\n+                } catch (e) {\n+                  print(e);\n+                }\n               },\n             )\n           ],\n         ),\n"
                },
                {
                    "date": 1628771894950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,9 @@\n                       email: email, password: password);\n                   if (newUser != null) print('object');\n                 } catch (e) {\n                   print(e);\n+                  print('555');\n                 }\n               },\n             )\n           ],\n"
                },
                {
                    "date": 1628773252926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:firebase_core/firebase_core.dart';\n import 'package:flash_chat/componnt/rounded_button.dart';\n import 'package:flash_chat/constants.dart';\n import 'package:flutter/material.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n@@ -10,8 +11,10 @@\n   _RegistrationScreenState createState() => _RegistrationScreenState();\n }\n \n class _RegistrationScreenState extends State<RegistrationScreen> {\n+  FirebaseApp secondaryApp = Firebase.app('Flash_Chat');\n+\n   /// make instance of authentication\n   /// make it final because it will not change\n   /// privat so other classes cant accidently change it\n   final _auth = FirebaseAuth.instance;\n"
                },
                {
                    "date": 1628778943001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,8 @@\n   _RegistrationScreenState createState() => _RegistrationScreenState();\n }\n \n class _RegistrationScreenState extends State<RegistrationScreen> {\n-  FirebaseApp secondaryApp = Firebase.app('Flash_Chat');\n-\n   /// make instance of authentication\n   /// make it final because it will not change\n   /// privat so other classes cant accidently change it\n   final _auth = FirebaseAuth.instance;\n"
                },
                {
                    "date": 1628779362539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,10 +81,10 @@\n                 try {\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n                       email: email, password: password);\n                   if (newUser != null) print('object');\n-                } catch (e) {\n-                  print(e);\n+                } on FirebaseAuthException catch (e) {\n+                  print(e.message);\n                   print('555');\n                 }\n               },\n             )\n"
                },
                {
                    "date": 1628779497155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n-                      email: email, password: password);\n+                      email: 'ahmeddd@gmail.com', password: 'vgggvvhbk58@555');\n                   if (newUser != null) print('object');\n                 } on FirebaseAuthException catch (e) {\n                   print(e.message);\n                   print('555');\n"
                },
                {
                    "date": 1628781539772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-import 'package:firebase_core/firebase_core.dart';\n import 'package:flash_chat/componnt/rounded_button.dart';\n import 'package:flash_chat/constants.dart';\n import 'package:flutter/material.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n@@ -78,11 +77,13 @@\n                 /// because of unvalid email or other thing\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n-                  final newUser = await _auth.createUserWithEmailAndPassword(\n-                      email: 'ahmeddd@gmail.com', password: 'vgggvvhbk58@555');\n-                  if (newUser != null) print('object');\n+                  await _auth\n+                      .createUserWithEmailAndPassword(\n+                          email: 'ahmeddd@gmail.com',\n+                          password: 'vgggvvhbk58@555')\n+                      .whenComplete(() => print('666666'));\n                 } on FirebaseAuthException catch (e) {\n                   print(e.message);\n                   print('555');\n                 }\n"
                },
                {
                    "date": 1628798196418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,13 +77,15 @@\n                 /// because of unvalid email or other thing\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n-                  await _auth\n+                 final newUser=RegistrationScreen await _auth\n                       .createUserWithEmailAndPassword(\n                           email: 'ahmeddd@gmail.com',\n-                          password: 'vgggvvhbk58@555')\n-                      .whenComplete(() => print('666666'));\n+                          password: 'vgggvvhbk58@555');\n+                          if(newUser!=null){\n+                            print(newUser);\n+                          }\n                 } on FirebaseAuthException catch (e) {\n                   print(e.message);\n                   print('555');\n                 }\n"
                },
                {
                    "date": 1628798202149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,15 +77,13 @@\n                 /// because of unvalid email or other thing\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n-                 final newUser=RegistrationScreen await _auth\n-                      .createUserWithEmailAndPassword(\n-                          email: 'ahmeddd@gmail.com',\n-                          password: 'vgggvvhbk58@555');\n-                          if(newUser!=null){\n-                            print(newUser);\n-                          }\n+                  final newUser = await _auth.createUserWithEmailAndPassword(\n+                      email: 'ahmeddd@gmail.com', password: 'vgggvvhbk58@555');\n+                  if (newUser != null) {\n+                    print(newUser);\n+                  }\n                 } on FirebaseAuthException catch (e) {\n                   print(e.message);\n                   print('555');\n                 }\n"
                },
                {
                    "date": 1628798210164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n                 try {\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n                       email: 'ahmeddd@gmail.com', password: 'vgggvvhbk58@555');\n                   if (newUser != null) {\n-                    print(newUser);\n+                    print(newUser.user);\n                   }\n                 } on FirebaseAuthException catch (e) {\n                   print(e.message);\n                   print('555');\n"
                },
                {
                    "date": 1628893840899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,20 @@\n                 } on FirebaseAuthException catch (e) {\n                   print(e.message);\n                   print('555');\n                 }\n+\n+                if (secure == true) {\n+                  setState(() {\n+                    secure = false;\n+                    iconPassword = Icons.panorama_fish_eye;\n+                  });\n+                } else {\n+                  setState(() {\n+                    secure = true;\n+                    iconPassword = Icons.remove_red_eye;\n+                  });\n+                }\n               },\n             )\n           ],\n         ),\n"
                },
                {
                    "date": 1628894319980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,10 +77,12 @@\n                 /// because of unvalid email or other thing\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n-                  final newUser = await _auth.createUserWithEmailAndPassword(\n-                      email: 'ahmeddd@gmail.com', password: 'vgggvvhbk58@555');\n+                  final newUser = compute(\n+                      await _auth.createUserWithEmailAndPassword(\n+                          email: 'ahmeddd@gmail.com',\n+                          password: 'vgggvvhbk58@555'));\n                   if (newUser != null) {\n                     print(newUser.user);\n                   }\n                 } on FirebaseAuthException catch (e) {\n"
                },
                {
                    "date": 1628894363049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:flash_chat/componnt/rounded_button.dart';\n import 'package:flash_chat/constants.dart';\n+import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n \n class RegistrationScreen extends StatefulWidget {\n@@ -77,11 +78,10 @@\n                 /// because of unvalid email or other thing\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n-                  final newUser = compute(\n-                      await _auth.createUserWithEmailAndPassword(\n-                          email: 'ahmeddd@gmail.com',\n+                  final newUser =\n+                      compute(await _auth.createUserWithEmailAndPassword(),                          email: 'ahmeddd@gmail.com',\n                           password: 'vgggvvhbk58@555'));\n                   if (newUser != null) {\n                     print(newUser.user);\n                   }\n"
                },
                {
                    "date": 1628894504953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,11 +78,11 @@\n                 /// because of unvalid email or other thing\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n-                  final newUser =\n-                      compute(await _auth.createUserWithEmailAndPassword(),                          email: 'ahmeddd@gmail.com',\n-                          password: 'vgggvvhbk58@555'));\n+                  final new =compute(_auth.createUserWithEmailAndPassword(email,User));\n+                  final newUser = await _auth.createUserWithEmailAndPassword(\n+                      email: 'ahmeddd@gmail.com', password: 'vgggvvhbk58@555');\n                   if (newUser != null) {\n                     print(newUser.user);\n                   }\n                 } on FirebaseAuthException catch (e) {\n"
                },
                {
                    "date": 1628894516887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,8 @@\n                 /// because of unvalid email or other thing\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n-                  final new =compute(_auth.createUserWithEmailAndPassword(email,User));\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n                       email: 'ahmeddd@gmail.com', password: 'vgggvvhbk58@555');\n                   if (newUser != null) {\n                     print(newUser.user);\n"
                },
                {
                    "date": 1628894533532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                 /// then return of this method is future so  we use async and await\n                 /// put them in variable of type final  because it will not change\n                 try {\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n-                      email: 'ahmeddd@gmail.com', password: 'vgggvvhbk58@555');\n+                      email: email, password: password);\n                   if (newUser != null) {\n                     print(newUser.user);\n                   }\n                 } on FirebaseAuthException catch (e) {\n"
                },
                {
                    "date": 1628894584035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,11 +83,11 @@\n                       email: email, password: password);\n                   if (newUser != null) {\n                     print(newUser.user);\n                   }\n+                  // for any firebase auth exception\n                 } on FirebaseAuthException catch (e) {\n                   print(e.message);\n-                  print('555');\n                 }\n \n                 if (secure == true) {\n                   setState(() {\n"
                },
                {
                    "date": 1628894803517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:flash_chat/componnt/rounded_button.dart';\n import 'package:flash_chat/constants.dart';\n+import 'package:flash_chat/screens/chat_screen.dart';\n import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n \n@@ -81,10 +82,13 @@\n                 try {\n                   final newUser = await _auth.createUserWithEmailAndPassword(\n                       email: email, password: password);\n                   if (newUser != null) {\n+                    // lead him to chat screen to start messaging\n+                    Navigator.pushNamed(context, ChatScreen.id);\n                     print(newUser.user);\n                   }\n+\n                   // for any firebase auth exception\n                 } on FirebaseAuthException catch (e) {\n                   print(e.message);\n                 }\n"
                },
                {
                    "date": 1633863818811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'package:flash_chat/componnt/rounded_button.dart';\n import 'package:flash_chat/constants.dart';\n import 'package:flash_chat/screens/chat_screen.dart';\n-import 'package:flutter/foundation.dart';\n+import 'package:modal_progress_hud/modal_progress_hud.dart';\n import 'package:flutter/material.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n \n class RegistrationScreen extends StatefulWidget {\n@@ -14,100 +14,115 @@\n \n class _RegistrationScreenState extends State<RegistrationScreen> {\n   /// make instance of authentication\n   /// make it final because it will not change\n-  /// privat so other classes cant accidently change it\n+  /// private so other classes cant accidentally change it\n   final _auth = FirebaseAuth.instance;\n \n   /// make variable to save our data\n   String email;\n   String password;\n \n+  /// for spinner\n+  bool showSpinner = false;\n+\n   /// for securing or not in text field\n   bool secure = true;\n   IconData iconPassword = Icons.remove_red_eye;\n   @override\n   Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: Colors.white,\n-      body: Padding(\n-        padding: EdgeInsets.symmetric(horizontal: 24.0),\n-        child: Column(\n-          mainAxisAlignment: MainAxisAlignment.center,\n-          crossAxisAlignment: CrossAxisAlignment.stretch,\n-          children: <Widget>[\n-            Hero(\n-              tag: 'logo',\n-              child: Container(\n-                height: 200.0,\n-                child: Image.asset('images/logo.png'),\n+    return ModalProgressHUD(\n+      inAsyncCall: showSpinner,\n+      child: Scaffold(\n+        backgroundColor: Colors.white,\n+        body: Padding(\n+          padding: EdgeInsets.symmetric(horizontal: 24.0),\n+          child: Column(\n+            mainAxisAlignment: MainAxisAlignment.center,\n+            crossAxisAlignment: CrossAxisAlignment.stretch,\n+            children: <Widget>[\n+              Flexible(\n+                child: Hero(\n+                  tag: 'logo',\n+                  child: Container(\n+                    height: 200.0,\n+                    child: Image.asset('images/logo.png'),\n+                  ),\n+                ),\n               ),\n-            ),\n-            const SizedBox(\n-              height: 48.0,\n-            ),\n-            TextField(\n-                textAlign: TextAlign.center,\n-                keyboardType: TextInputType.emailAddress,\n-                onChanged: (value) {\n-                  //Do something with the user input.\n-                  email = value;\n-                },\n-                decoration: KTextFieldDecoration.copyWith(\n-                    hintText: 'Enter your email')),\n-            SizedBox(\n-              height: 8.0,\n-            ),\n-            TextField(\n-                obscureText: secure,\n-                textAlign: TextAlign.center,\n-                onChanged: (value) {\n-                  //Do something with the user input.\n-                  password = value;\n-                },\n-                // override by using copy with\n-                decoration: KTextFieldDecoration.copyWith(\n-                    hintText: 'Enter your password')),\n-            SizedBox(\n-              height: 24.0,\n-            ),\n-            RoundedButton(\n-              color: Colors.blueAccent,\n-              title: 'Register',\n-              onpressed: () async {\n-                //Implement registration functionality.\n-                /// try create users and handle thrown exception\n-                /// because of unvalid email or other thing\n-                /// then return of this method is future so  we use async and await\n-                /// put them in variable of type final  because it will not change\n-                try {\n-                  final newUser = await _auth.createUserWithEmailAndPassword(\n-                      email: email, password: password);\n-                  if (newUser != null) {\n-                    // lead him to chat screen to start messaging\n-                    Navigator.pushNamed(context, ChatScreen.id);\n-                    print(newUser.user);\n+              const SizedBox(\n+                height: 48.0,\n+              ),\n+              TextField(\n+                  textAlign: TextAlign.center,\n+                  keyboardType: TextInputType.emailAddress,\n+                  onChanged: (value) {\n+                    //Do something with the user input.\n+                    email = value;\n+                  },\n+                  decoration: KTextFieldDecoration.copyWith(\n+                      hintText: 'Enter your email')),\n+              SizedBox(\n+                height: 8.0,\n+              ),\n+              TextField(\n+                  obscureText: secure,\n+                  textAlign: TextAlign.center,\n+                  onChanged: (value) {\n+                    //Do something with the user input.\n+                    password = value;\n+                  },\n+                  // override by using copy with\n+                  decoration: KTextFieldDecoration.copyWith(\n+                      hintText: 'Enter your password')),\n+              SizedBox(\n+                height: 24.0,\n+              ),\n+              RoundedButton(\n+                color: Colors.blueAccent,\n+                title: 'Register',\n+                onpressed: () async {\n+                  // make spinner while creating users\n+                  setState(() {\n+                    showSpinner = true;\n+                  });\n+                  //Implement registration functionality.\n+                  /// try create users and handle thrown exception\n+                  /// because of invalid email or other thing\n+                  /// then return of this method is future so  we use async and await\n+                  /// put them in variable of type final  because it will not change\n+                  try {\n+                    final newUser = await _auth.createUserWithEmailAndPassword(\n+                        email: email, password: password);\n+                    if (newUser != null) {\n+                      setState(() {\n+                        showSpinner = false;\n+                      });\n+                      // lead him to chat screen to start messaging\n+                      Navigator.pushNamed(context, ChatScreen.id);\n+                      print(newUser.user);\n+                    }\n+\n+                    // for any firebase auth exception\n+                  } on FirebaseAuthException catch (e) {\n+                    print(e.message);\n                   }\n \n-                  // for any firebase auth exception\n-                } on FirebaseAuthException catch (e) {\n-                  print(e.message);\n-                }\n-\n-                if (secure == true) {\n-                  setState(() {\n-                    secure = false;\n-                    iconPassword = Icons.panorama_fish_eye;\n-                  });\n-                } else {\n-                  setState(() {\n-                    secure = true;\n-                    iconPassword = Icons.remove_red_eye;\n-                  });\n-                }\n-              },\n-            )\n-          ],\n+                  if (secure == true) {\n+                    setState(() {\n+                      secure = false;\n+                      iconPassword = Icons.panorama_fish_eye;\n+                    });\n+                  } else {\n+                    setState(() {\n+                      secure = true;\n+                      iconPassword = Icons.remove_red_eye;\n+                    });\n+                  }\n+                },\n+              )\n+            ],\n+          ),\n         ),\n       ),\n     );\n   }\n"
                }
            ],
            "date": 1628084997161,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\n\nclass RegistrationScreen extends StatefulWidget {\n  static const String id = 'registration_screen';\n\n  @override\n  _RegistrationScreenState createState() => _RegistrationScreenState();\n}\n\nclass _RegistrationScreenState extends State<RegistrationScreen> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.white,\n      body: Padding(\n        padding: EdgeInsets.symmetric(horizontal: 24.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          crossAxisAlignment: CrossAxisAlignment.stretch,\n          children: <Widget>[\n            Container(\n              height: 200.0,\n              child: Image.asset('images/logo.png'),\n            ),\n            SizedBox(\n              height: 48.0,\n            ),\n            TextField(\n              onChanged: (value) {\n                //Do something with the user input.\n              },\n              decoration: InputDecoration(\n                hintText: 'Enter your email',\n                contentPadding:\n                    EdgeInsets.symmetric(vertical: 10.0, horizontal: 20.0),\n                border: OutlineInputBorder(\n                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderSide: BorderSide(color: Colors.blueAccent, width: 1.0),\n                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderSide: BorderSide(color: Colors.blueAccent, width: 2.0),\n                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n                ),\n              ),\n            ),\n            SizedBox(\n              height: 8.0,\n            ),\n            TextField(\n              onChanged: (value) {\n                //Do something with the user input.\n              },\n              decoration: InputDecoration(\n                hintText: 'Enter your password',\n                contentPadding:\n                    EdgeInsets.symmetric(vertical: 10.0, horizontal: 20.0),\n                border: OutlineInputBorder(\n                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n                ),\n                enabledBorder: OutlineInputBorder(\n                  borderSide: BorderSide(color: Colors.blueAccent, width: 1.0),\n                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n                ),\n                focusedBorder: OutlineInputBorder(\n                  borderSide: BorderSide(color: Colors.blueAccent, width: 2.0),\n                  borderRadius: BorderRadius.all(Radius.circular(32.0)),\n                ),\n              ),\n            ),\n            SizedBox(\n              height: 24.0,\n            ),\n            Padding(\n              padding: EdgeInsets.symmetric(vertical: 16.0),\n              child: Material(\n                color: Colors.blueAccent,\n                borderRadius: BorderRadius.all(Radius.circular(30.0)),\n                elevation: 5.0,\n                child: MaterialButton(\n                  onPressed: () {\n                    //Implement registration functionality.\n                  },\n                  minWidth: 200.0,\n                  height: 42.0,\n                  child: Text(\n                    'Register',\n                    style: TextStyle(color: Colors.white),\n                  ),\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
        }
    ]
}