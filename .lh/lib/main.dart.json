{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 56,
            "patches": [
                {
                    "date": 1628077071548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1628077190798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n class FlashChat extends StatelessWidget {\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n-      theme: ThemeData.light().copyWith(\n+      theme: ThemeData.dark().copyWith(\n         textTheme: TextTheme(\n           bodyText2: TextStyle(color: Colors.black54),\n         ),\n       ),\n"
                },
                {
                    "date": 1628077212322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n class FlashChat extends StatelessWidget {\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n+      debugShowCheckedModeBanner: false,\n       theme: ThemeData.dark().copyWith(\n         textTheme: TextTheme(\n           bodyText2: TextStyle(color: Colors.black54),\n         ),\n"
                },
                {
                    "date": 1628080334295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,8 @@\n         textTheme: TextTheme(\n           bodyText2: TextStyle(color: Colors.black54),\n         ),\n       ),\n-      home: WelcomeScreen(),\n+      routes: '/':(context)=> const WelcomeScreen(),\n     );\n   }\n }\n"
                },
                {
                    "date": 1628080351370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,15 @@\n class FlashChat extends StatelessWidget {\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n-      debugShowCheckedModeBanner: false,\n-      theme: ThemeData.dark().copyWith(\n-        textTheme: TextTheme(\n-          bodyText2: TextStyle(color: Colors.black54),\n+        debugShowCheckedModeBanner: false,\n+        theme: ThemeData.dark().copyWith(\n+          textTheme: TextTheme(\n+            bodyText2: TextStyle(color: Colors.black54),\n+          ),\n         ),\n-      ),\n-      routes: '/':(context)=> const WelcomeScreen(),\n-    );\n+        routes: {\n+          '/': (context) => const WelcomeScreen(),\n+        });\n   }\n }\n"
                },
                {
                    "date": 1628080435043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,11 @@\n             bodyText2: TextStyle(color: Colors.black54),\n           ),\n         ),\n         routes: {\n-          '/': (context) => const WelcomeScreen(),\n+          '/': (context) => WelcomeScreen(),\n+          '/second': (context) => ChatScreen(),\n+          '/third': (context) => LoginScreen(),\n+          '/foruth': (context) => RegistrationScreen(),\n         });\n   }\n }\n"
                },
                {
                    "date": 1628080446713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n           textTheme: TextTheme(\n             bodyText2: TextStyle(color: Colors.black54),\n           ),\n         ),\n+        initialRoute: '/',\n         routes: {\n           '/': (context) => WelcomeScreen(),\n           '/second': (context) => ChatScreen(),\n           '/third': (context) => LoginScreen(),\n"
                },
                {
                    "date": 1628080558107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n           textTheme: TextTheme(\n             bodyText2: TextStyle(color: Colors.black54),\n           ),\n         ),\n-        initialRoute: '/',\n         routes: {\n           '/': (context) => WelcomeScreen(),\n           '/second': (context) => ChatScreen(),\n           '/third': (context) => LoginScreen(),\n"
                },
                {
                    "date": 1628080768328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,11 @@\n             bodyText2: TextStyle(color: Colors.black54),\n           ),\n         ),\n         routes: {\n-          '/': (context) => WelcomeScreen(),\n-          '/second': (context) => ChatScreen(),\n-          '/third': (context) => LoginScreen(),\n-          '/foruth': (context) => RegistrationScreen(),\n+          'welcome_screen': (context) => WelcomeScreen(),\n+          'chat_screen': (context) => ChatScreen(),\n+          'login_screen': (context) => LoginScreen(),\n+          'registration_screen': (context) => RegistrationScreen(),\n         });\n   }\n }\n"
                },
                {
                    "date": 1628080791587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n           textTheme: TextTheme(\n             bodyText2: TextStyle(color: Colors.black54),\n           ),\n         ),\n+        initialRoute: 'welcome_screen',\n         routes: {\n           'welcome_screen': (context) => WelcomeScreen(),\n           'chat_screen': (context) => ChatScreen(),\n           'login_screen': (context) => LoginScreen(),\n"
                },
                {
                    "date": 1628081261610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,11 @@\n           textTheme: TextTheme(\n             bodyText2: TextStyle(color: Colors.black54),\n           ),\n         ),\n-        initialRoute: 'welcome_screen',\n+        initialRoute: WelcomeScreen.id,\n         routes: {\n-          'welcome_screen': (context) => WelcomeScreen(),\n+          WelcomeScreen.id: (context) => WelcomeScreen(),\n           'chat_screen': (context) => ChatScreen(),\n           'login_screen': (context) => LoginScreen(),\n           'registration_screen': (context) => RegistrationScreen(),\n         });\n"
                },
                {
                    "date": 1628085023317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n         ),\n         initialRoute: WelcomeScreen.id,\n         routes: {\n           WelcomeScreen.id: (context) => WelcomeScreen(),\n-          'chat_screen': (context) => ChatScreen(),\n-          'login_screen': (context) => LoginScreen(),\n-          'registration_screen': (context) => RegistrationScreen(),\n+          ChatScreen.id: (context) => ChatScreen(),\n+          LoginScreen.id: (context) => LoginScreen(),\n+          RegistrationScreen.id: (context) => RegistrationScreen(),\n         });\n   }\n }\n"
                },
                {
                    "date": 1628087795602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n             bodyText2: TextStyle(color: Colors.black54),\n           ),\n         ),\n         initialRoute: WelcomeScreen.id,\n+        // if U use slash syle\n+        //U must define route as / nothing or your app will be crahsed\n         routes: {\n           WelcomeScreen.id: (context) => WelcomeScreen(),\n           ChatScreen.id: (context) => ChatScreen(),\n           LoginScreen.id: (context) => LoginScreen(),\n"
                },
                {
                    "date": 1628158504319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,4 +26,13 @@\n           RegistrationScreen.id: (context) => RegistrationScreen(),\n         });\n   }\n }\n+/*\n+hero anmaition which takes place in\n+ screen transition which is simplest way\n+ from page 1 to page 2 but this require shared element \n+ whic known in android shared element transtion \n+ 1- hero anmation require two hero in two pages\n+ 2- shared tag prperty \n+ 3- naviagation between two pages\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628164186928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,7 +32,7 @@\n  screen transition which is simplest way\n  from page 1 to page 2 but this require shared element \n  whic known in android shared element transtion \n  1- hero anmation require two hero in two pages\n- 2- shared tag prperty \n+ 2- shared tag prperty so flutter know what will be animatd\n  3- naviagation between two pages\n */\n\\ No newline at end of file\n"
                },
                {
                    "date": 1628168335509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,5 +34,15 @@\n  whic known in android shared element transtion \n  1- hero anmation require two hero in two pages\n  2- shared tag prperty so flutter know what will be animatd\n  3- naviagation between two pages\n-*/\n\\ No newline at end of file\n+*/\n+// fade transition to hide and  show elements or pop up or not\n+// custom animation --> change the background or size or each prperty or move something\n+//there are 4 main concept ticker-anmation controller-anmation value\n+//1- ticker look like in clock tick - something to count \n+//each tick of our clock that our anmation will change \n+// it looks like flip book to make anmation \n+//2- anmation controller is the manager that set the values and tell anmation to \n+// start or to stop or forwaerd or reverse \n+//3-animation value usually from 0 to 1\n+ \n"
                },
                {
                    "date": 1628173388117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,5 +44,11 @@\n // it looks like flip book to make anmation \n //2- anmation controller is the manager that set the values and tell anmation to \n // start or to stop or forwaerd or reverse \n //3-animation value usually from 0 to 1\n- \n+ // change upper bound  to 100 to use it \n+ // this will change increasly \n+ // to change in shaape like a curve\n+ // curve animation as non linear \n+ // https://flutter.dev/docs/development/ui/animations/tutorial\n+ // this type is explict \n+ // there is type called implict for container or not \n"
                },
                {
                    "date": 1628173718773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,4 +51,6 @@\n  // curve animation as non linear \n  // https://flutter.dev/docs/development/ui/animations/tutorial\n  // this type is explict \n  // there is type called implict for container or not \n+ // u have to mange life cycle of controller\n+ // which all of them are code based animation\n"
                },
                {
                    "date": 1628174165269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,10 @@\n  // this will change increasly \n  // to change in shaape like a curve\n  // curve animation as non linear \n  // https://flutter.dev/docs/development/ui/animations/tutorial\n+ //  to know which curve must use\n+ // https://api.flutter.dev/flutter/animation/Curves-class.html\n  // this type is explict \n  // there is type called implict for container or not \n  // u have to mange life cycle of controller\n  // which all of them are code based animation\n"
                },
                {
                    "date": 1628178007308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,12 @@\n  // curve animation as non linear \n  // https://flutter.dev/docs/development/ui/animations/tutorial\n  //  to know which curve must use\n  // https://api.flutter.dev/flutter/animation/Curves-class.html\n+ // \n+ // Animation that translate between two vlaues\n+ // use tween Animation\n+ // like starting color and end color\n  // this type is explict \n  // there is type called implict for container or not \n  // u have to mange life cycle of controller\n  // which all of them are code based animation\n"
                },
                {
                    "date": 1628415176676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,4 +59,15 @@\n  // this type is explict \n  // there is type called implict for container or not \n  // u have to mange life cycle of controller\n  // which all of them are code based animation\n+\n+\n+//lesson with and mixmin\n+// reusing class code meaning be able to inherit from that class.\n+// the normal way of it, is using extends but U can exyend only one class\n+//class duck extends bird{}\n+//but there is another way to reuse part of classes's code\n+//U don't have to inherit from any body but U can reuse bits of code\n+//mixmin canFly{ void fly(){print('can fly')}}\n+//mixmin canSwim{ void fly(){print('can swim')}}\n+// class Duck extends animal with canFly, canSwim{ }\n"
                },
                {
                    "date": 1628416842146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,6 +68,10 @@\n //class duck extends bird{}\n //but there is another way to reuse part of classes's code\n //U don't have to inherit from any body but U can reuse bits of code\n //mixmin canFly{ void fly(){print('can fly')}}\n-//mixmin canSwim{ void fly(){print('can swim')}}\n+//mixins canSwim{ void fly(){print('can swim')}}\n // class Duck extends animal with canFly, canSwim{ }\n+\n+//lesson with prepackaged. there are alot of available animation\n+// like flutter sequence animation. instance animation change color size and so on\n+// rubber, sprung and animated text kit to animate text  \n"
                },
                {
                    "date": 1628422742909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,4 +74,6 @@\n \n //lesson with prepackaged. there are alot of available animation\n // like flutter sequence animation. instance animation change color size and so on\n // rubber, sprung and animated text kit to animate text  \n+\n+// refactor  by usinng android studio flutter outline --> extract widget \n"
                },
                {
                    "date": 1628430272297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,4 +76,6 @@\n // like flutter sequence animation. instance animation change color size and so on\n // rubber, sprung and animated text kit to animate text  \n \n // refactor  by usinng android studio flutter outline --> extract widget \n+/// put constant like decoration in constant not tob make spagethi\n+/// to edit some constant use write with\n"
                },
                {
                    "date": 1628430538056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n         debugShowCheckedModeBanner: false,\n-        theme: ThemeData.dark().copyWith(\n+        theme: ThemeData.light().copyWith(\n           textTheme: TextTheme(\n             bodyText2: TextStyle(color: Colors.black54),\n           ),\n         ),\n"
                },
                {
                    "date": 1628430566281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,13 +10,13 @@\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n         debugShowCheckedModeBanner: false,\n-        theme: ThemeData.light().copyWith(\n-          textTheme: TextTheme(\n-            bodyText2: TextStyle(color: Colors.black54),\n-          ),\n-        ),\n+        // theme: ThemeData.light().copyWith(\n+        //   textTheme: TextTheme(\n+        //     bodyText2: TextStyle(color: Colors.black54),\n+        //   ),\n+\n         initialRoute: WelcomeScreen.id,\n         // if U use slash syle\n         //U must define route as / nothing or your app will be crahsed\n         routes: {\n"
                },
                {
                    "date": 1628430920474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,4 +78,5 @@\n \n // refactor  by usinng android studio flutter outline --> extract widget \n /// put constant like decoration in constant not tob make spagethi\n /// to edit some constant use write with\n+// do some refactor . make it striaghy foraward\n"
                },
                {
                    "date": 1628434431791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,4 +79,6 @@\n // refactor  by usinng android studio flutter outline --> extract widget \n /// put constant like decoration in constant not tob make spagethi\n /// to edit some constant use write with\n // do some refactor . make it striaghy foraward\n+\n+// Firebase cloud\n"
                },
                {
                    "date": 1628585224900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+import 'package:flutter/material.dart';\n+import 'package:flash_chat/screens/welcome_screen.dart';\n+import 'package:flash_chat/screens/login_screen.dart';\n+import 'package:flash_chat/screens/registration_screen.dart';\n+import 'package:flash_chat/screens/chat_screen.dart';\n+\n+void main() => runApp(FlashChat());\n+\n+class FlashChat extends StatelessWidget {\n+  @override\n+  Widget build(BuildContext context) {\n+    return MaterialApp(\n+        debugShowCheckedModeBanner: false,\n+        // theme: ThemeData.light().copyWith(\n+        //   textTheme: TextTheme(\n+        //     bodyText2: TextStyle(color: Colors.black54),\n+        //   ),\n+\n+        initialRoute: WelcomeScreen.id,\n+        // if U use slash syle\n+        //U must define route as / nothing or your app will be crahsed\n+        routes: {\n+          WelcomeScreen.id: (context) => WelcomeScreen(),\n+          ChatScreen.id: (context) => ChatScreen(),\n+          LoginScreen.id: (context) => LoginScreen(),\n+          RegistrationScreen.id: (context) => RegistrationScreen(),\n+        });\n+  }\n+}\n+/*\n+hero anmaition which takes place in\n+ screen transition which is simplest way\n+ from page 1 to page 2 but this require shared element \n+ whic known in android shared element transtion \n+ 1- hero anmation require two hero in two pages\n+ 2- shared tag prperty so flutter know what will be animatd\n+ 3- naviagation between two pages\n+*/\n+// fade transition to hide and  show elements or pop up or not\n+// custom animation --> change the background or size or each prperty or move something\n+//there are 4 main concept ticker-anmation controller-anmation value\n+//1- ticker look like in clock tick - something to count \n+//each tick of our clock that our anmation will change \n+// it looks like flip book to make anmation \n+//2- anmation controller is the manager that set the values and tell anmation to \n+// start or to stop or forwaerd or reverse \n+//3-animation value usually from 0 to 1\n+ // change upper bound  to 100 to use it \n+ // this will change increasly \n+ // to change in shaape like a curve\n+ // curve animation as non linear \n+ // https://flutter.dev/docs/development/ui/animations/tutorial\n+ //  to know which curve must use\n+ // https://api.flutter.dev/flutter/animation/Curves-class.html\n+ // \n+ // Animation that translate between two vlaues\n+ // use tween Animation\n+ // like starting color and end color\n+ // this type is explict \n+ // there is type called implict for container or not \n+ // u have to mange life cycle of controller\n+ // which all of them are code based animation\n+\n+\n+//lesson with and mixmin\n+// reusing class code meaning be able to inherit from that class.\n+// the normal way of it, is using extends but U can exyend only one class\n+//class duck extends bird{}\n+//but there is another way to reuse part of classes's code\n+//U don't have to inherit from any body but U can reuse bits of code\n+//mixmin canFly{ void fly(){print('can fly')}}\n+//mixins canSwim{ void fly(){print('can swim')}}\n+// class Duck extends animal with canFly, canSwim{ }\n+\n+//lesson with prepackaged. there are alot of available animation\n+// like flutter sequence animation. instance animation change color size and so on\n+// rubber, sprung and animated text kit to animate text  \n+\n+// refactor  by usinng android studio flutter outline --> extract widget \n+/// put constant like decoration in constant not tob make spagethi\n+/// to edit some constant use write with\n+// do some refactor . make it striaghy foraward\n+\n+// Firebase cloud\n+// must apply all instruction for android or ios \n\\ No newline at end of file\n"
                },
                {
                    "date": 1628590170496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,89 +81,8 @@\n /// to edit some constant use write with\n // do some refactor . make it striaghy foraward\n \n // Firebase cloud\n-// must apply all instruction for android or ios \n-import 'package:flutter/material.dart';\n-import 'package:flash_chat/screens/welcome_screen.dart';\n-import 'package:flash_chat/screens/login_screen.dart';\n-import 'package:flash_chat/screens/registration_screen.dart';\n-import 'package:flash_chat/screens/chat_screen.dart';\n-\n-void main() => runApp(FlashChat());\n-\n-class FlashChat extends StatelessWidget {\n-  @override\n-  Widget build(BuildContext context) {\n-    return MaterialApp(\n-        debugShowCheckedModeBanner: false,\n-        // theme: ThemeData.light().copyWith(\n-        //   textTheme: TextTheme(\n-        //     bodyText2: TextStyle(color: Colors.black54),\n-        //   ),\n-\n-        initialRoute: WelcomeScreen.id,\n-        // if U use slash syle\n-        //U must define route as / nothing or your app will be crahsed\n-        routes: {\n-          WelcomeScreen.id: (context) => WelcomeScreen(),\n-          ChatScreen.id: (context) => ChatScreen(),\n-          LoginScreen.id: (context) => LoginScreen(),\n-          RegistrationScreen.id: (context) => RegistrationScreen(),\n-        });\n-  }\n-}\n-/*\n-hero anmaition which takes place in\n- screen transition which is simplest way\n- from page 1 to page 2 but this require shared element \n- whic known in android shared element transtion \n- 1- hero anmation require two hero in two pages\n- 2- shared tag prperty so flutter know what will be animatd\n- 3- naviagation between two pages\n-*/\n-// fade transition to hide and  show elements or pop up or not\n-// custom animation --> change the background or size or each prperty or move something\n-//there are 4 main concept ticker-anmation controller-anmation value\n-//1- ticker look like in clock tick - something to count \n-//each tick of our clock that our anmation will change \n-// it looks like flip book to make anmation \n-//2- anmation controller is the manager that set the values and tell anmation to \n-// start or to stop or forwaerd or reverse \n-//3-animation value usually from 0 to 1\n- // change upper bound  to 100 to use it \n- // this will change increasly \n- // to change in shaape like a curve\n- // curve animation as non linear \n- // https://flutter.dev/docs/development/ui/animations/tutorial\n- //  to know which curve must use\n- // https://api.flutter.dev/flutter/animation/Curves-class.html\n- // \n- // Animation that translate between two vlaues\n- // use tween Animation\n- // like starting color and end color\n- // this type is explict \n- // there is type called implict for container or not \n- // u have to mange life cycle of controller\n- // which all of them are code based animation\n-\n-\n-//lesson with and mixmin\n-// reusing class code meaning be able to inherit from that class.\n-// the normal way of it, is using extends but U can exyend only one class\n-//class duck extends bird{}\n-//but there is another way to reuse part of classes's code\n-//U don't have to inherit from any body but U can reuse bits of code\n-//mixmin canFly{ void fly(){print('can fly')}}\n-//mixins canSwim{ void fly(){print('can swim')}}\n-// class Duck extends animal with canFly, canSwim{ }\n-\n-//lesson with prepackaged. there are alot of available animation\n-// like flutter sequence animation. instance animation change color size and so on\n-// rubber, sprung and animated text kit to animate text  \n-\n-// refactor  by usinng android studio flutter outline --> extract widget \n-/// put constant like decoration in constant not tob make spagethi\n-/// to edit some constant use write with\n-// do some refactor . make it striaghy foraward\n-\n-// Firebase cloud\n\\ No newline at end of file\n+// must apply all instruction for android or ios but ios requires mac and iphone to test it\n+// we need ccloud_firebase and its authentication.\n+// aviable features of firebase --> https://github.com/FirebaseExtended/flutterfire\n+// must apply fireBaseCore first before U need \n"
                },
                {
                    "date": 1628757330307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,73 +16,99 @@\n         //     bodyText2: TextStyle(color: Colors.black54),\n         //   ),\n \n         initialRoute: WelcomeScreen.id,\n-        // if U use slash syle\n-        //U must define route as / nothing or your app will be crahsed\n+        // if U use slash style\n+        //U must define route as / nothing or your app will be crashed\n         routes: {\n           WelcomeScreen.id: (context) => WelcomeScreen(),\n           ChatScreen.id: (context) => ChatScreen(),\n           LoginScreen.id: (context) => LoginScreen(),\n           RegistrationScreen.id: (context) => RegistrationScreen(),\n         });\n   }\n }\n+\n+///advice for all coming years\n+///if U change any thing or add in build.gradle\n+///and U get error search about solutions that change\n+/// classpath(\"com.android.tools.build:gradle:3.5.2\")\n+///because at probably this is problem because version can make conflict with other thing\n+\n+///8 REFACTOR\n+//if there are repeated widget --> U must refactor it to make your code clean and simple\n+//like we did with rounded button.\n+// if there is constant thing and u use it more than one -->\n+///must put it in constant file like decoration\n+//and u can change some properties in it by using key Word\n+/// COPY WITH()\n+\n+///9 hero animation which takes place in\n /*\n-hero anmaition which takes place in\n  screen transition which is simplest way\n- from page 1 to page 2 but this require shared element \n- whic known in android shared element transtion \n- 1- hero anmation require two hero in two pages\n- 2- shared tag prperty so flutter know what will be animatd\n- 3- naviagation between two pages\n+ from page 1 to page 2 but this require shared element\n+ which known in android shared element transition\n+ 1- hero animation require two hero in two pages\n+ 2- shared tag property so flutter know what will be animated\n+ 3- navigation between two pages\n */\n-// fade transition to hide and  show elements or pop up or not\n-// custom animation --> change the background or size or each prperty or move something\n-//there are 4 main concept ticker-anmation controller-anmation value\n-//1- ticker look like in clock tick - something to count \n-//each tick of our clock that our anmation will change \n-// it looks like flip book to make anmation \n-//2- anmation controller is the manager that set the values and tell anmation to \n-// start or to stop or forwaerd or reverse \n+/// fade transition to hide and  show elements or pop up or not\n+// custom animation --> change the background or size or each property or move something\n+//there are 4 main concept ticker-animation controller-animation value\n+//1- ticker look like in clock tick - something to count\n+//each tick of our clock that our animation will change\n+// it looks like flip book to make animation\n+//2- animation controller is the manager that set the values and tell animation to\n+// start or to stop or forward or reverse\n //3-animation value usually from 0 to 1\n- // change upper bound  to 100 to use it \n- // this will change increasly \n- // to change in shaape like a curve\n- // curve animation as non linear \n- // https://flutter.dev/docs/development/ui/animations/tutorial\n- //  to know which curve must use\n- // https://api.flutter.dev/flutter/animation/Curves-class.html\n- // \n- // Animation that translate between two vlaues\n- // use tween Animation\n- // like starting color and end color\n- // this type is explict \n- // there is type called implict for container or not \n- // u have to mange life cycle of controller\n- // which all of them are code based animation\n+// change upper bound  to 100 to use it\n+// this will change increasing\n+// to change in shape like a curve\n+/// curve animation as non linear\n+// https://flutter.dev/docs/development/ui/animations/tutorial\n+//  to know which curve must use\n+// https://api.flutter.dev/flutter/animation/Curves-class.html\n+//\n+/// Animation that translate between two values --> use tween Animation\n+// like starting color and end color\n+// this type is explicit\n+// there is type called implicit for container or not\n+// u have to mange life cycle of controller\n+// which all of them are code based animation\n \n-\n-//lesson with and mixmin\n+///10 lesson with and mixin\n // reusing class code meaning be able to inherit from that class.\n-// the normal way of it, is using extends but U can exyend only one class\n+// the normal way of it, is using extends but U can extend only one class\n //class duck extends bird{}\n //but there is another way to reuse part of classes's code\n //U don't have to inherit from any body but U can reuse bits of code\n-//mixmin canFly{ void fly(){print('can fly')}}\n-//mixins canSwim{ void fly(){print('can swim')}}\n+//mixin canFly{ void fly(){print('can fly')}}\n+//mixin canSwim{ void fly(){print('can swim')}}\n // class Duck extends animal with canFly, canSwim{ }\n \n-//lesson with prepackaged. there are alot of available animation\n+///lesson with prepackaged. there are  a lot of available animation\n // like flutter sequence animation. instance animation change color size and so on\n-// rubber, sprung and animated text kit to animate text  \n+// rubber, sprung and animated text kit to animate text\n \n-// refactor  by usinng android studio flutter outline --> extract widget \n-/// put constant like decoration in constant not tob make spagethi\n+// refactor  by using android studio flutter outline --> extract widget\n+/// put constant like decoration in constant not tob make spaghetti\n /// to edit some constant use write with\n-// do some refactor . make it striaghy foraward\n+// do some refactor . make it straight forward\n \n-// Firebase cloud\n+///11 Firebase cloud\n // must apply all instruction for android or ios but ios requires mac and iphone to test it\n-// we need ccloud_firebase and its authentication.\n-// aviable features of firebase --> https://github.com/FirebaseExtended/flutterfire\n-// must apply fireBaseCore first before U need \n+// we need cloud_firebase and its authentication.\n+// available features of firebase --> https://github.com/FirebaseExtended/flutterfire\n+// must apply fireBaseCore first before U need\n+/// link for some problem faced because of android\n+///https://blog.londonappbrewery.com/troubleshooting-firebase-x-flutter-a974b2645689#003a\n+\n+///12 Authentication user with firebase\n+//first U get changed value of text field and store in a variable for registration and login screen\n+// must change som editing to be more best UI\n+// use call back on changed to get value user enter and save it in vaiable\n+// change prperty align in text field to align it in center\n+// override deration of textfield to make suffix icon in it to change security of this text\n+// property called oscure text \n+// to make gmail keyboard show on screen instead of custom one\n+///                       keyboardType:TextInputType.emailAddress,\n+\n"
                },
                {
                    "date": 1628759237114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,5 +110,6 @@\n // override deration of textfield to make suffix icon in it to change security of this text\n // property called oscure text \n // to make gmail keyboard show on screen instead of custom one\n ///                       keyboardType:TextInputType.emailAddress,\n+// core firebase is responsible for connecting your application to Firebase.\n \n"
                },
                {
                    "date": 1628760239496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,29 +2,43 @@\n import 'package:flash_chat/screens/welcome_screen.dart';\n import 'package:flash_chat/screens/login_screen.dart';\n import 'package:flash_chat/screens/registration_screen.dart';\n import 'package:flash_chat/screens/chat_screen.dart';\n+import 'package:firebase_core/firebase_core.dart';\n \n void main() => runApp(FlashChat());\n \n class FlashChat extends StatelessWidget {\n+  // to intialize firebase\n+  // make connection to it\n+  final _intialzation = Firebase.initializeApp();\n   @override\n   Widget build(BuildContext context) {\n-    return MaterialApp(\n-        debugShowCheckedModeBanner: false,\n-        // theme: ThemeData.light().copyWith(\n-        //   textTheme: TextTheme(\n-        //     bodyText2: TextStyle(color: Colors.black54),\n-        //   ),\n+    return FutureBuilder(\n+        future: _intialzation,\n+        builder: (context, snapshot) {\n+          // check for error\n+          if (snapshot.hasError) print(snapshot.error);\n+          // return depending on connection\n+          if (snapshot.connectionState == ConnectionState.done) {\n+            return MaterialApp(\n+                debugShowCheckedModeBanner: false,\n+                // theme: ThemeData.light().copyWith(\n+                //   textTheme: TextTheme(\n+                //     bodyText2: TextStyle(color: Colors.black54),\n+                //   ),\n \n-        initialRoute: WelcomeScreen.id,\n-        // if U use slash style\n-        //U must define route as / nothing or your app will be crashed\n-        routes: {\n-          WelcomeScreen.id: (context) => WelcomeScreen(),\n-          ChatScreen.id: (context) => ChatScreen(),\n-          LoginScreen.id: (context) => LoginScreen(),\n-          RegistrationScreen.id: (context) => RegistrationScreen(),\n+                initialRoute: WelcomeScreen.id,\n+                // if U use slash style\n+                //U must define route as / nothing or your app will be crashed\n+                routes: {\n+                  WelcomeScreen.id: (context) => WelcomeScreen(),\n+                  ChatScreen.id: (context) => ChatScreen(),\n+                  LoginScreen.id: (context) => LoginScreen(),\n+                  RegistrationScreen.id: (context) => RegistrationScreen(),\n+                });\n+          }\n+          return CircularProgressIndicator();\n         });\n   }\n }\n \n@@ -107,9 +121,8 @@\n // must change som editing to be more best UI\n // use call back on changed to get value user enter and save it in vaiable\n // change prperty align in text field to align it in center\n // override deration of textfield to make suffix icon in it to change security of this text\n-// property called oscure text \n+// property called oscure text\n // to make gmail keyboard show on screen instead of custom one\n ///                       keyboardType:TextInputType.emailAddress,\n // core firebase is responsible for connecting your application to Firebase.\n-\n"
                },
                {
                    "date": 1628761694455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n class FlashChat extends StatelessWidget {\n   // to intialize firebase\n   // make connection to it\n-  final _intialzation = Firebase.initializeApp();\n+  final Future<FirebaseApp> _intialzation = Firebase.initializeApp();\n   @override\n   Widget build(BuildContext context) {\n     return FutureBuilder(\n         future: _intialzation,\n"
                },
                {
                    "date": 1628762014617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,28 @@\n         builder: (context, snapshot) {\n           // check for error\n           if (snapshot.hasError) print(snapshot.error);\n           // return depending on connection\n+          try {\n+            if (snapshot.connectionState == ConnectionState.done) {\n+              return MaterialApp(\n+                  debugShowCheckedModeBanner: false,\n+                  // theme: ThemeData.light().copyWith(\n+                  //   textTheme: TextTheme(\n+                  //     bodyText2: TextStyle(color: Colors.black54),\n+                  //   ),\n+\n+                  initialRoute: WelcomeScreen.id,\n+                  // if U use slash style\n+                  //U must define route as / nothing or your app will be crashed\n+                  routes: {\n+                    WelcomeScreen.id: (context) => WelcomeScreen(),\n+                    ChatScreen.id: (context) => ChatScreen(),\n+                    LoginScreen.id: (context) => LoginScreen(),\n+                    RegistrationScreen.id: (context) => RegistrationScreen(),\n+                  });\n+            }\n+          } catch (e) {}\n           if (snapshot.connectionState == ConnectionState.done) {\n             return MaterialApp(\n                 debugShowCheckedModeBanner: false,\n                 // theme: ThemeData.light().copyWith(\n"
                },
                {
                    "date": 1628762322490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,63 +2,29 @@\n import 'package:flash_chat/screens/welcome_screen.dart';\n import 'package:flash_chat/screens/login_screen.dart';\n import 'package:flash_chat/screens/registration_screen.dart';\n import 'package:flash_chat/screens/chat_screen.dart';\n-import 'package:firebase_core/firebase_core.dart';\n \n void main() => runApp(FlashChat());\n \n class FlashChat extends StatelessWidget {\n-  // to intialize firebase\n-  // make connection to it\n-  final Future<FirebaseApp> _intialzation = Firebase.initializeApp();\n   @override\n   Widget build(BuildContext context) {\n-    return FutureBuilder(\n-        future: _intialzation,\n-        builder: (context, snapshot) {\n-          // check for error\n-          if (snapshot.hasError) print(snapshot.error);\n-          // return depending on connection\n-          try {\n-            if (snapshot.connectionState == ConnectionState.done) {\n-              return MaterialApp(\n-                  debugShowCheckedModeBanner: false,\n-                  // theme: ThemeData.light().copyWith(\n-                  //   textTheme: TextTheme(\n-                  //     bodyText2: TextStyle(color: Colors.black54),\n-                  //   ),\n+    return MaterialApp(\n+        debugShowCheckedModeBanner: false,\n+        // theme: ThemeData.light().copyWith(\n+        //   textTheme: TextTheme(\n+        //     bodyText2: TextStyle(color: Colors.black54),\n+        //   ),\n \n-                  initialRoute: WelcomeScreen.id,\n-                  // if U use slash style\n-                  //U must define route as / nothing or your app will be crashed\n-                  routes: {\n-                    WelcomeScreen.id: (context) => WelcomeScreen(),\n-                    ChatScreen.id: (context) => ChatScreen(),\n-                    LoginScreen.id: (context) => LoginScreen(),\n-                    RegistrationScreen.id: (context) => RegistrationScreen(),\n-                  });\n-            }\n-          } catch (e) {}\n-          if (snapshot.connectionState == ConnectionState.done) {\n-            return MaterialApp(\n-                debugShowCheckedModeBanner: false,\n-                // theme: ThemeData.light().copyWith(\n-                //   textTheme: TextTheme(\n-                //     bodyText2: TextStyle(color: Colors.black54),\n-                //   ),\n-\n-                initialRoute: WelcomeScreen.id,\n-                // if U use slash style\n-                //U must define route as / nothing or your app will be crashed\n-                routes: {\n-                  WelcomeScreen.id: (context) => WelcomeScreen(),\n-                  ChatScreen.id: (context) => ChatScreen(),\n-                  LoginScreen.id: (context) => LoginScreen(),\n-                  RegistrationScreen.id: (context) => RegistrationScreen(),\n-                });\n-          }\n-          return CircularProgressIndicator();\n+        initialRoute: WelcomeScreen.id,\n+        // if U use slash style\n+        //U must define route as / nothing or your app will be crashed\n+        routes: {\n+          WelcomeScreen.id: (context) => WelcomeScreen(),\n+          ChatScreen.id: (context) => ChatScreen(),\n+          LoginScreen.id: (context) => LoginScreen(),\n+          RegistrationScreen.id: (context) => RegistrationScreen(),\n         });\n   }\n }\n \n@@ -141,8 +107,9 @@\n // must change som editing to be more best UI\n // use call back on changed to get value user enter and save it in vaiable\n // change prperty align in text field to align it in center\n // override deration of textfield to make suffix icon in it to change security of this text\n-// property called oscure text\n+// property called oscure text \n // to make gmail keyboard show on screen instead of custom one\n ///                       keyboardType:TextInputType.emailAddress,\n // core firebase is responsible for connecting your application to Firebase.\n+\n"
                },
                {
                    "date": 1628770701647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,29 +2,45 @@\n import 'package:flash_chat/screens/welcome_screen.dart';\n import 'package:flash_chat/screens/login_screen.dart';\n import 'package:flash_chat/screens/registration_screen.dart';\n import 'package:flash_chat/screens/chat_screen.dart';\n+import 'package:firebase_core/firebase_core.dart';\n \n void main() => runApp(FlashChat());\n \n class FlashChat extends StatelessWidget {\n+  // intializ firebase appp\n+  Future<FirebaseApp> _initializeFirebase() async {\n+    FirebaseApp firebaseApp = await Firebase.initializeApp();\n+    return firebaseApp;\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n-    return MaterialApp(\n-        debugShowCheckedModeBanner: false,\n-        // theme: ThemeData.light().copyWith(\n-        //   textTheme: TextTheme(\n-        //     bodyText2: TextStyle(color: Colors.black54),\n-        //   ),\n+    return FutureBuilder(\n+        future: _initializeFirebase(),\n+        builder: (context, snapshot) {\n+          if (snapshot.connectionState == ConnectionState.done) {\n+            return MaterialApp(\n+                debugShowCheckedModeBanner: false,\n+                // theme: ThemeData.light().copyWith(\n+                //   textTheme: TextTheme(\n+                //     bodyText2: TextStyle(color: Colors.black54),\n+                //   ),\n \n-        initialRoute: WelcomeScreen.id,\n-        // if U use slash style\n-        //U must define route as / nothing or your app will be crashed\n-        routes: {\n-          WelcomeScreen.id: (context) => WelcomeScreen(),\n-          ChatScreen.id: (context) => ChatScreen(),\n-          LoginScreen.id: (context) => LoginScreen(),\n-          RegistrationScreen.id: (context) => RegistrationScreen(),\n+                initialRoute: WelcomeScreen.id,\n+                // if U use slash style\n+                //U must define route as / nothing or your app will be crashed\n+                routes: {\n+                  WelcomeScreen.id: (context) => WelcomeScreen(),\n+                  ChatScreen.id: (context) => ChatScreen(),\n+                  LoginScreen.id: (context) => LoginScreen(),\n+                  RegistrationScreen.id: (context) => RegistrationScreen(),\n+                });\n+          }\n+          return Center(\n+            child: CircularProgressIndicator(),\n+          );\n         });\n   }\n }\n \n"
                },
                {
                    "date": 1628771466879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,15 @@\n \n class FlashChat extends StatelessWidget {\n   // intializ firebase appp\n   Future<FirebaseApp> _initializeFirebase() async {\n-    FirebaseApp firebaseApp = await Firebase.initializeApp();\n+    FirebaseApp firebaseApp = await Firebase.initializeApp(\n+        name: 'Flash Chat',\n+        options: const FirebaseOptions(\n+            appId: '1:631651260878:android:1346d3a108f822e3ad339f',\n+            apiKey: 'AIzaSyA6V5y3qWG9Ros2DS4MeSxTSi2lmet-_JM',\n+            messagingSenderId: '631651260878',\n+            projectId: 'flash-chat-ae0ed'));\n     return firebaseApp;\n   }\n \n   @override\n"
                },
                {
                    "date": 1628772649231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         name: 'Flash Chat',\n         options: const FirebaseOptions(\n             appId: '1:631651260878:android:1346d3a108f822e3ad339f',\n             apiKey: 'AIzaSyA6V5y3qWG9Ros2DS4MeSxTSi2lmet-_JM',\n-            messagingSenderId: '631651260878',\n+            messagingSenderId: 'flash_chat_flutter',\n             projectId: 'flash-chat-ae0ed'));\n     return firebaseApp;\n   }\n \n"
                },
                {
                    "date": 1628778497199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,51 +2,32 @@\n import 'package:flash_chat/screens/welcome_screen.dart';\n import 'package:flash_chat/screens/login_screen.dart';\n import 'package:flash_chat/screens/registration_screen.dart';\n import 'package:flash_chat/screens/chat_screen.dart';\n-import 'package:firebase_core/firebase_core.dart';\n \n void main() => runApp(FlashChat());\n \n class FlashChat extends StatelessWidget {\n-  // intializ firebase appp\n-  Future<FirebaseApp> _initializeFirebase() async {\n-    FirebaseApp firebaseApp = await Firebase.initializeApp(\n-        name: 'Flash Chat',\n-        options: const FirebaseOptions(\n-            appId: '1:631651260878:android:1346d3a108f822e3ad339f',\n-            apiKey: 'AIzaSyA6V5y3qWG9Ros2DS4MeSxTSi2lmet-_JM',\n-            messagingSenderId: 'flash_chat_flutter',\n-            projectId: 'flash-chat-ae0ed'));\n-    return firebaseApp;\n-  }\n+  // to intialize firebase\n+  // make connection to it\n \n   @override\n   Widget build(BuildContext context) {\n-    return FutureBuilder(\n-        future: _initializeFirebase(),\n-        builder: (context, snapshot) {\n-          if (snapshot.connectionState == ConnectionState.done) {\n-            return MaterialApp(\n-                debugShowCheckedModeBanner: false,\n-                // theme: ThemeData.light().copyWith(\n-                //   textTheme: TextTheme(\n-                //     bodyText2: TextStyle(color: Colors.black54),\n-                //   ),\n+    return MaterialApp(\n+        debugShowCheckedModeBanner: false,\n+        // theme: ThemeData.light().copyWith(\n+        //   textTheme: TextTheme(\n+        //     bodyText2: TextStyle(color: Colors.black54),\n+        //   ),\n \n-                initialRoute: WelcomeScreen.id,\n-                // if U use slash style\n-                //U must define route as / nothing or your app will be crashed\n-                routes: {\n-                  WelcomeScreen.id: (context) => WelcomeScreen(),\n-                  ChatScreen.id: (context) => ChatScreen(),\n-                  LoginScreen.id: (context) => LoginScreen(),\n-                  RegistrationScreen.id: (context) => RegistrationScreen(),\n-                });\n-          }\n-          return Center(\n-            child: CircularProgressIndicator(),\n-          );\n+        initialRoute: WelcomeScreen.id,\n+        // if U use slash style\n+        //U must define route as / nothing or your app will be crashed\n+        routes: {\n+          WelcomeScreen.id: (context) => WelcomeScreen(),\n+          ChatScreen.id: (context) => ChatScreen(),\n+          LoginScreen.id: (context) => LoginScreen(),\n+          RegistrationScreen.id: (context) => RegistrationScreen(),\n         });\n   }\n }\n \n"
                },
                {
                    "date": 1628778742153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,18 @@\n+import 'package:firebase_core/firebase_core.dart';\n import 'package:flutter/material.dart';\n import 'package:flash_chat/screens/welcome_screen.dart';\n import 'package:flash_chat/screens/login_screen.dart';\n import 'package:flash_chat/screens/registration_screen.dart';\n import 'package:flash_chat/screens/chat_screen.dart';\n \n-void main() => runApp(FlashChat());\n+Future<void> main() async {\n+  WidgetsFlutterBinding.ensureInitialized();\n+  await Firebase.initializeApp();\n \n+  runApp(FlashChat());\n+}\n+\n class FlashChat extends StatelessWidget {\n   // to intialize firebase\n   // make connection to it\n \n"
                },
                {
                    "date": 1628779977261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,14 @@\n import 'package:flash_chat/screens/chat_screen.dart';\n \n Future<void> main() async {\n   WidgetsFlutterBinding.ensureInitialized();\n-  await Firebase.initializeApp();\n+  await Firebase.initializeApp(\n+      options: FirebaseOptions(\n+          apiKey: \"AIzaSyA6V5y3qWG9Ros2DS4MeSxTSi2lmet-_JM\",\n+          appId: \"1:631651260878:android:1346d3a108f822e3ad339f\",\n+          messagingSenderId: \"Flash_Chat_Flutter\",\n+          projectId: \"flash-chat-ae0ed\"));\n \n   runApp(FlashChat());\n }\n \n"
                },
                {
                    "date": 1628780716833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,14 @@\n \n Future<void> main() async {\n   WidgetsFlutterBinding.ensureInitialized();\n   await Firebase.initializeApp(\n+      name: 'Flash-Chat',\n       options: FirebaseOptions(\n           apiKey: \"AIzaSyA6V5y3qWG9Ros2DS4MeSxTSi2lmet-_JM\",\n           appId: \"1:631651260878:android:1346d3a108f822e3ad339f\",\n           messagingSenderId: \"Flash_Chat_Flutter\",\n-          projectId: \"flash-chat-ae0ed\"));\n+          projectId: 'flash-chat-ae0ed'));\n \n   runApp(FlashChat());\n }\n \n"
                },
                {
                    "date": 1628781264774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n Future<void> main() async {\n   WidgetsFlutterBinding.ensureInitialized();\n   await Firebase.initializeApp(\n-      name: 'Flash-Chat',\n+      name: 'flash_chat',\n       options: FirebaseOptions(\n           apiKey: \"AIzaSyA6V5y3qWG9Ros2DS4MeSxTSi2lmet-_JM\",\n           appId: \"1:631651260878:android:1346d3a108f822e3ad339f\",\n           messagingSenderId: \"Flash_Chat_Flutter\",\n"
                },
                {
                    "date": 1628781754580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,12 @@\n   WidgetsFlutterBinding.ensureInitialized();\n   await Firebase.initializeApp(\n       name: 'flash_chat',\n       options: FirebaseOptions(\n-          apiKey: \"AIzaSyA6V5y3qWG9Ros2DS4MeSxTSi2lmet-_JM\",\n-          appId: \"1:631651260878:android:1346d3a108f822e3ad339f\",\n-          messagingSenderId: \"Flash_Chat_Flutter\",\n-          projectId: 'flash-chat-ae0ed'));\n+          appId: '1:448618578101:ios:0b650370bb29e29cac3efc',\n+          apiKey: 'AIzaSyAgUhHU8wSJgO5MVNy95tMT07NEjzMOfz0',\n+          projectId: 'react-native-firebase-testing',\n+          messagingSenderId: '448618578101'));\n \n   runApp(FlashChat());\n }\n \n"
                },
                {
                    "date": 1628797138110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,14 +7,15 @@\n \n Future<void> main() async {\n   WidgetsFlutterBinding.ensureInitialized();\n   await Firebase.initializeApp(\n-      name: 'flash_chat',\n-      options: FirebaseOptions(\n-          appId: '1:448618578101:ios:0b650370bb29e29cac3efc',\n-          apiKey: 'AIzaSyAgUhHU8wSJgO5MVNy95tMT07NEjzMOfz0',\n-          projectId: 'react-native-firebase-testing',\n-          messagingSenderId: '448618578101'));\n+      // name: 'flash_chat',\n+      // options: FirebaseOptions(\n+      //     appId: '1:448618578101:ios:0b650370bb29e29cac3efc',\n+      //     apiKey: 'AIzaSyAgUhHU8wSJgO5MVNy95tMT07NEjzMOfz0',\n+      //     projectId: 'react-native-firebase-testing',\n+      //     messagingSenderId: '448618578101')\n+      );\n \n   runApp(FlashChat());\n }\n \n"
                },
                {
                    "date": 1628893982311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,6 +126,21 @@\n // override deration of textfield to make suffix icon in it to change security of this text\n // property called oscure text \n // to make gmail keyboard show on screen instead of custom one\n ///                       keyboardType:TextInputType.emailAddress,\n+/// make sceure or not (جدعنه منى دى)\n+/*\n+if (secure == true) {\n+                                setState(() {\n+                                  secure = false;\n+                                  iconPassword = Icons.panorama_fish_eye;\n+                                });\n+                              } else {\n+                                setState(() {\n+                                  secure = true;\n+                                  iconPassword = Icons.remove_red_eye;\n+                                });\n+                              }\n+*/\n+\n // core firebase is responsible for connecting your application to Firebase.\n \n"
                },
                {
                    "date": 1629123909043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,26 +4,18 @@\n import 'package:flash_chat/screens/login_screen.dart';\n import 'package:flash_chat/screens/registration_screen.dart';\n import 'package:flash_chat/screens/chat_screen.dart';\n \n+// to initialize firebase\n+// make connection to it\n Future<void> main() async {\n   WidgetsFlutterBinding.ensureInitialized();\n-  await Firebase.initializeApp(\n-      // name: 'flash_chat',\n-      // options: FirebaseOptions(\n-      //     appId: '1:448618578101:ios:0b650370bb29e29cac3efc',\n-      //     apiKey: 'AIzaSyAgUhHU8wSJgO5MVNy95tMT07NEjzMOfz0',\n-      //     projectId: 'react-native-firebase-testing',\n-      //     messagingSenderId: '448618578101')\n-      );\n+  await Firebase.initializeApp();\n \n   runApp(FlashChat());\n }\n \n class FlashChat extends StatelessWidget {\n-  // to intialize firebase\n-  // make connection to it\n-\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n         debugShowCheckedModeBanner: false,\n@@ -120,15 +112,15 @@\n \n ///12 Authentication user with firebase\n //first U get changed value of text field and store in a variable for registration and login screen\n // must change som editing to be more best UI\n-// use call back on changed to get value user enter and save it in vaiable\n-// change prperty align in text field to align it in center\n-// override deration of textfield to make suffix icon in it to change security of this text\n-// property called oscure text \n-// to make gmail keyboard show on screen instead of custom one\n+// use call back on changed to get value user enter and save it in variable\n+// change property align in text field to align it in center\n+// override duration of text field to make suffix icon in it to change security of this text\n+// property called obscure text\n+// to make g-mail keyboard show on screen instead of custom one\n ///                       keyboardType:TextInputType.emailAddress,\n-/// make sceure or not (جدعنه منى دى)\n+/// make secure or not (جدعنه منى دى)\n /*\n if (secure == true) {\n                                 setState(() {\n                                   secure = false;\n@@ -141,6 +133,63 @@\n                                 });\n                               }\n */\n \n-// core firebase is responsible for connecting your application to Firebase.\n+/// core firebase is responsible for connecting your application to Firebase.\n+// U must initialize first in Your main and us binding widget to ensure initialing\n+// U must enable register new user in in firebase authentication\n \n+///(16) ## Authentication Users with firebase ##\n+/// sign in by existing user in log-in screen by using method sign-in email and password then wait for response\n+/// so if response not null so go to chat screen\n+/*\n+try {\n+                        final signedINUser =\n+                            await _auth.signInWithEmailAndPassword(\n+                                email: email, password: password);\n+                        if (signedINUser != null) {\n+                          Navigator.pushNamed(context, ChatScreen.id);\n+                        }\n+                      } on FirebaseAuthException catch (e) {\n+                        print(e.message);\n+                      }\n+                    },\n+ */\n+/// in chat screen make method to retrieve last successful sign in\n+/// // method for get last successful e-mail signed-in\n+/// //make variable for logged in user\n+//   User loggedIn;\n+//  void getCurrentUser() async {\n+//     try {\n+//       final currentUser = _auth.currentUser;\n+//       if (currentUser != null) {\n+//         print('done' + loggedIn.email.toString());\n+//       }\n+//     } catch (e) {\n+//       print(e);\n+//     }\n+//   }\n+/// call this method in initState\n+///\n+///(17) ## make spinner upon registration or log in while getting or sending to firebase ##\n+/// using package -> modal_progress_hud 0.1.3\n+\n+///18 fire store\n+/// this is no sql database while working in test mode but U must change it after testing to locked mode\n+/// make messages collection to store all messages and then create two fields (String,String) text and User\n+/// make instance of fire store then send this to our store by using\n+///Implement send functionality.\n+//                       await _fireStore\n+//                           .collection('messages')\n+//                           .add({'text': messageText, 'sender': loggedIn.email});\n+// we can use this method getMessage()\n+// make method\n+  // void getMessages() async {\n+   /// get first collection reference then get this collection\n+     /// Snapshot is the result of the Future or Stream you are listening to in your FutureBuilder.\n+  //   final message = await _fireStore.collection('messages').get();\n+  //   // to get all document in collection\n+  //   for (var snapShot in message.docs) {\n+  //     print(snapShot.data());\n+  //   }\n+  // }\n+\n"
                },
                {
                    "date": 1629124347258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,5 +191,6 @@\n   //   for (var snapShot in message.docs) {\n   //     print(snapShot.data());\n   //   }\n   // }\n+  // but to get always updated message --> U must call it again and again\n \n"
                },
                {
                    "date": 1629126072050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,6 +191,21 @@\n   //   for (var snapShot in message.docs) {\n   //     print(snapShot.data());\n   //   }\n   // }\n-  // but to get always updated message --> U must call it again and again\n+  /// {sender: ahmed@email.com, text: hifcgh}\n \n+  // but to get always updated message --> U must call it again and again \n+  //so for eample check for nw messages two times and it returns future \n+  /// but the bettr approach to  do it instantly message, U want to get every updated messages.\n+  /// /// to listen to stream of data\n+  /// notify for any new messages\n+  // void messageStream() async{\n+  //   // notify all documents in this collection\n+  //    await for( var snapShot in _fireStore.collection('messages').snapshots()){\n+  //      // return all docs\n+  //      for(var message in snapShot.docs ){\n+  //        print(message.data());\n+  //      }\n+  //    }\n+  // }\n+\n"
                },
                {
                    "date": 1633287538184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,11 +172,15 @@\n ///\n ///(17) ## make spinner upon registration or log in while getting or sending to firebase ##\n /// using package -> modal_progress_hud 0.1.3\n \n-///18 fire store\n+///18 fire store (firebase cloud)\n+/// summary\n+/// if we hit send all messages will go to our DB which will find it in fire base data base.\n /// this is no sql database while working in test mode but U must change it after testing to locked mode\n+/// collection is the thing that U care about it and in our case is Messages\n /// make messages collection to store all messages and then create two fields (String,String) text and User\n+/// by current loggend in user send theses messages\n /// make instance of fire store then send this to our store by using\n ///Implement send functionality.\n //                       await _fireStore\n //                           .collection('messages')\n@@ -185,8 +189,14 @@\n // make method\n   // void getMessages() async {\n    /// get first collection reference then get this collection\n      /// Snapshot is the result of the Future or Stream you are listening to in your FutureBuilder.\n+     /// stream tells us that the data is ready instad of calling it by my self\n+     ///  1/ we use only query at at time by this method\n+     /// To read a collection or document once,\n+     ///  call the Query.get or DocumentReference.get methods. \n+\n+\n   //   final message = await _fireStore.collection('messages').get();\n   //   // to get all document in collection\n   //   for (var snapShot in message.docs) {\n   //     print(snapShot.data());\n@@ -197,15 +207,30 @@\n   // but to get always updated message --> U must call it again and again \n   //so for eample check for nw messages two times and it returns future \n   /// but the bettr approach to  do it instantly message, U want to get every updated messages.\n   /// /// to listen to stream of data\n+  /// 2/ real time data\n   /// notify for any new messages\n+  /// autoatically pushed to our app instead of calling it agagin and again .....\n+  /// going to listen to changes happenes in this collection listen to the stream\n+  ///     // snapshot return stream so we want one query --> use for each\n+    // then we want only doc --> use another for each\n+\n   // void messageStream() async{\n   //   // notify all documents in this collection\n+  // wait for until this complete\n   //    await for( var snapShot in _fireStore.collection('messages').snapshots()){\n   //      // return all docs\n   //      for(var message in snapShot.docs ){\n   //        print(message.data());\n   //      }\n   //    }\n   // }\n \n+  // another way to listen to streams\n+    // _fireStore.collection('collectionPath').snapshots().listen((event) {\n+    //   for (var e in event.docs) {\n+    //     print(e.data());\n+    //   }\n+    // });\n+\n+// or by using stream builder in fire base website\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633419468586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,5 +232,13 @@\n     //     print(e.data());\n     //   }\n     // });\n \n-// or by using stream builder in fire base website\n\\ No newline at end of file\n+// or by using stream builder in fire base website\n+\n+///21 How to convert stream to widgets\n+/// by using stream builder- it's able to rebuild itself each time new value comes from stream builder\n+///which helps automatically manage the streams state\n+/// and disposal of the stream when it's no longer used within your app.\n+/// need two important 1-stream 2-builder\n+\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1633445416188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,11 +234,41 @@\n     // });\n \n // or by using stream builder in fire base website\n \n-///21 How to convert stream to widgets\n+///21 How to convert stream to widgets by two steps\n+///1- just display data in widget\n /// by using stream builder- it's able to rebuild itself each time new value comes from stream builder\n-///which helps automatically manage the streams state\n-/// and disposal of the stream when it's no longer used within your app.\n+///which helps automatically manage the streams state and disposal of the stream when it's no longer used within your app.\n /// need two important 1-stream 2-builder\n+///             // stream- -> that where data comes from\n+            // builder build stargey --> provide the logic for the stream should actually do\n+            // each update will provide an Async snap shot which the most interaction with stream\n+            // StreamBuilder<QuerySnapshot>(\n+            //   stream: _fireStore.collection('messages').snapshots(),\n+            //   builder: (context, snapshot) {\n+            //     if (!snapshot.hasData) {\n+            //       return CircularProgressIndicator();\n+            //     }\n+            //     // now we have access to context and snap shot that contain streams\n+            //     // this snap shot cntain Query Snap Shot from fire base\n+            //     // to specify what kind of returnded data --> make stream builder of Query Snap Shot\n+            //     final messages = snapshot.data.docs;\n+            //     // return list of Query Document Snap Shot\n+            //     // so we must iterate in it to get all its elemnts\n+            //     List<Text> listWidget = [];\n+            //     for (var message in messages) {\n+            //       final mapData = message.data() as Map<String, dynamic>;\n+            //       final messageText = mapData['text'];\n+            //       final messageSnder = mapData['sender'];\n+            //       final textWidget = Text('$messageText from $messageSnder');\n+            //       // then add it to list\n+            //       listWidget.add(textWidget);\n+            //     }\n \n+            //     return Column(\n+            //       children: listWidget,\n+            //     );\n+            //   },\n+            // ),\n+\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1633458818374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,6 +269,16 @@\n             //       children: listWidget,\n             //     );\n             //   },\n             // ),\n+            //\n+            //       /// we use simple circular indicartor instead of progress HuD which provide when to spin or not by attribute isAyncCall\n+        /// 2- improving the styling and user Experience of our chat App\n+            /// first wrap widget to listview instead of usual column\n+            ///  so we can scroll it then wrap it to expanded to take available space \n+            /// then add some horiaontal and vertical padding \n+            /// then instead of using usual text --> make own styl by create new widget (MessageBubble)\n+            ///   // provide text and sender\n+  // final String mText,mSender;\n+  // MessageBubble({this.mText, this.mSender});\n \n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1633530891491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,6 +279,43 @@\n             /// then instead of using usual text --> make own styl by create new widget (MessageBubble)\n             ///   // provide text and sender\n   // final String mText,mSender;\n   // MessageBubble({this.mText, this.mSender});\n+/// add some padding and by using materil widget ad color background\n+/// separte each seender and text and wrap them in clolumn\n\\ No newline at end of file\n+///  return Column(\n+    //   mainAxisAlignment: MainAxisAlignment.start,\n+    //   crossAxisAlignment: CrossAxisAlignment.end,\n+    //   children: [\n+    //     Text(\n+    //       mSender,\n+    //       style: TextStyle(fontSize: 10,color:Colors.black56),\n+                  // color to make it little lighter\n \n- \n+    //     ),\n+    //     Padding(\n+    //         padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),\n+    //         child: Material(\n+      /// give some shadow \n+    //             elevation: 5,\n+    /// to make it bubble\n+    //             borderRadius: BorderRadius.circular(30),\n+    //             color: Colors.lightBlue,\n+    //             child: Padding(\n+    //               padding: EdgeInsets.all(10),\n+    //               child: Text(\n+    //                 mText,\n+    //                 style: TextStyle(fontSize: 20, color: Colors.white),\n+    //               ),\n+    //             ))),\n+    //   ],\n+    // );\n+ ///refactor chat scren to be more readable to be bit simpler--> extract stream builder in separate widget\n+ ///put it in another file and put with it Message Bubble widget also\n+ ///pass to them _fireStore object\n+ /// we want to remove what user write in text filed after sending it and showing in our chat screen by using textEditor\n+ /// make final objct --> connect to text field --> // remove textController if not used to release resources\n+    // Clean up the controller when the widget is removed from the\n+    // widget tree.\n+ /// -->Finally, listen to the TextEditingController and call method that U want to implement\n+ /// when the text changes. Use the addListener() method for this purpose. put this in intiState\n+ /// but we only need to clear when user press send button so in send button -->call controller.clear();\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633774406707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,329 @@\n+import 'package:firebase_core/firebase_core.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flash_chat/screens/welcome_screen.dart';\n+import 'package:flash_chat/screens/login_screen.dart';\n+import 'package:flash_chat/screens/registration_screen.dart';\n+import 'package:flash_chat/screens/chat_screen.dart';\n+\n+// to initialize firebase\n+// make connection to it\n+Future<void> main() async {\n+  WidgetsFlutterBinding.ensureInitialized();\n+  await Firebase.initializeApp();\n+\n+  runApp(FlashChat());\n+}\n+\n+class FlashChat extends StatelessWidget {\n+  @override\n+  Widget build(BuildContext context) {\n+    return MaterialApp(\n+        debugShowCheckedModeBanner: false,\n+        // theme: ThemeData.light().copyWith(\n+        //   textTheme: TextTheme(\n+        //     bodyText2: TextStyle(color: Colors.black54),\n+        //   ),\n+\n+        initialRoute: WelcomeScreen.id,\n+        // if U use slash style\n+        //U must define route as / nothing or your app will be crashed\n+        routes: {\n+          WelcomeScreen.id: (context) => WelcomeScreen(),\n+          ChatScreen.id: (context) => ChatScreen(),\n+          LoginScreen.id: (context) => LoginScreen(),\n+          RegistrationScreen.id: (context) => RegistrationScreen(),\n+        });\n+  }\n+}\n+\n+///advice for all coming years\n+///if U change any thing or add in build.gradle\n+///and U get error search about solutions that change\n+/// classpath(\"com.android.tools.build:gradle:3.5.2\")\n+///because at probably this is problem because version can make conflict with other thing\n+\n+///8 REFACTOR\n+//if there are repeated widget --> U must refactor it to make your code clean and simple\n+//like we did with rounded button.\n+// if there is constant thing and u use it more than one -->\n+///must put it in constant file like decoration\n+//and u can change some properties in it by using key Word\n+/// COPY WITH()\n+\n+///9 hero animation which takes place in\n+/*\n+ screen transition which is simplest way\n+ from page 1 to page 2 but this require shared element\n+ which known in android shared element transition\n+ 1- hero animation require two hero in two pages\n+ 2- shared tag property so flutter know what will be animated\n+ 3- navigation between two pages\n+*/\n+/// fade transition to hide and  show elements or pop up or not\n+// custom animation --> change the background or size or each property or move something\n+//there are 4 main concept ticker-animation controller-animation value\n+//1- ticker look like in clock tick - something to count\n+//each tick of our clock that our animation will change\n+// it looks like flip book to make animation\n+//2- animation controller is the manager that set the values and tell animation to\n+// start or to stop or forward or reverse\n+//3-animation value usually from 0 to 1\n+// change upper bound  to 100 to use it\n+// this will change increasing\n+// to change in shape like a curve\n+/// curve animation as non linear\n+// https://flutter.dev/docs/development/ui/animations/tutorial\n+//  to know which curve must use\n+// https://api.flutter.dev/flutter/animation/Curves-class.html\n+//\n+/// Animation that translate between two values --> use tween Animation\n+// like starting color and end color\n+// this type is explicit\n+// there is type called implicit for container or not\n+// u have to mange life cycle of controller\n+// which all of them are code based animation\n+\n+///10 lesson with and mixin\n+// reusing class code meaning be able to inherit from that class.\n+// the normal way of it, is using extends but U can extend only one class\n+//class duck extends bird{}\n+//but there is another way to reuse part of classes's code\n+//U don't have to inherit from any body but U can reuse bits of code\n+//mixin canFly{ void fly(){print('can fly')}}\n+//mixin canSwim{ void fly(){print('can swim')}}\n+// class Duck extends animal with canFly, canSwim{ }\n+\n+///lesson with prepackaged. there are  a lot of available animation\n+// like flutter sequence animation. instance animation change color size and so on\n+// rubber, sprung and animated text kit to animate text\n+\n+// refactor  by using android studio flutter outline --> extract widget\n+/// put constant like decoration in constant not tob make spaghetti\n+/// to edit some constant use write with\n+// do some refactor . make it straight forward\n+\n+///11 Firebase cloud\n+// must apply all instruction for android or ios but ios requires mac and iphone to test it\n+// we need cloud_firebase and its authentication.\n+// available features of firebase --> https://github.com/FirebaseExtended/flutterfire\n+// must apply fireBaseCore first before U need\n+/// link for some problem faced because of android\n+///https://blog.londonappbrewery.com/troubleshooting-firebase-x-flutter-a974b2645689#003a\n+\n+///12 Authentication user with firebase\n+//first U get changed value of text field and store in a variable for registration and login screen\n+// must change som editing to be more best UI\n+// use call back on changed to get value user enter and save it in variable\n+// change property align in text field to align it in center\n+// override duration of text field to make suffix icon in it to change security of this text\n+// property called obscure text\n+// to make g-mail keyboard show on screen instead of custom one\n+///                       keyboardType:TextInputType.emailAddress,\n+/// make secure or not (جدعنه منى دى)\n+/*\n+if (secure == true) {\n+                                setState(() {\n+                                  secure = false;\n+                                  iconPassword = Icons.panorama_fish_eye;\n+                                });\n+                              } else {\n+                                setState(() {\n+                                  secure = true;\n+                                  iconPassword = Icons.remove_red_eye;\n+                                });\n+                              }\n+*/\n+\n+/// core firebase is responsible for connecting your application to Firebase.\n+// U must initialize first in Your main and us binding widget to ensure initialing\n+// U must enable register new user in in firebase authentication\n+\n+///(16) ## Authentication Users with firebase ##\n+/// sign in by existing user in log-in screen by using method sign-in email and password then wait for response\n+/// so if response not null so go to chat screen\n+/*\n+try {\n+                        final signedINUser =\n+                            await _auth.signInWithEmailAndPassword(\n+                                email: email, password: password);\n+                        if (signedINUser != null) {\n+                          Navigator.pushNamed(context, ChatScreen.id);\n+                        }\n+                      } on FirebaseAuthException catch (e) {\n+                        print(e.message);\n+                      }\n+                    },\n+ */\n+/// in chat screen make method to retrieve last successful sign in\n+/// // method for get last successful e-mail signed-in\n+/// //make variable for logged in user\n+//   User loggedIn;\n+//  void getCurrentUser() async {\n+//     try {\n+//       final currentUser = _auth.currentUser;\n+//       if (currentUser != null) {\n+//         print('done' + loggedIn.email.toString());\n+//       }\n+//     } catch (e) {\n+//       print(e);\n+//     }\n+//   }\n+/// call this method in initState\n+///\n+///(17) ## make spinner upon registration or log in while getting or sending to firebase ##\n+/// using package -> modal_progress_hud 0.1.3\n+\n+///18 fire store (firebase cloud)\n+/// summary\n+/// if we hit send all messages will go to our DB which will find it in fire base data base.\n+/// this is no sql database while working in test mode but U must change it after testing to locked mode\n+/// collection is the thing that U care about it and in our case is Messages\n+/// make messages collection to store all messages and then create two fields (String,String) text and User\n+/// by current loggend in user send theses messages\n+/// make instance of fire store then send this to our store by using\n+///Implement send functionality.\n+//                       await _fireStore\n+//                           .collection('messages')\n+//                           .add({'text': messageText, 'sender': loggedIn.email});\n+// we can use this method getMessage()\n+// make method\n+  // void getMessages() async {\n+   /// get first collection reference then get this collection\n+     /// Snapshot is the result of the Future or Stream you are listening to in your FutureBuilder.\n+     /// stream tells us that the data is ready instad of calling it by my self\n+     ///  1/ we use only query at at time by this method\n+     /// To read a collection or document once,\n+     ///  call the Query.get or DocumentReference.get methods. \n+\n+\n+  //   final message = await _fireStore.collection('messages').get();\n+  //   // to get all document in collection\n+  //   for (var snapShot in message.docs) {\n+  //     print(snapShot.data());\n+  //   }\n+  // }\n+  /// {sender: ahmed@email.com, text: hifcgh}\n+\n+  // but to get always updated message --> U must call it again and again \n+  //so for eample check for nw messages two times and it returns future \n+  /// but the bettr approach to  do it instantly message, U want to get every updated messages.\n+  /// /// to listen to stream of data\n+  /// 2/ real time data\n+  /// notify for any new messages\n+  /// autoatically pushed to our app instead of calling it agagin and again .....\n+  /// going to listen to changes happenes in this collection listen to the stream\n+  ///     // snapshot return stream so we want one query --> use for each\n+    // then we want only doc --> use another for each\n+\n+  // void messageStream() async{\n+  //   // notify all documents in this collection\n+  // wait for until this complete\n+  //    await for( var snapShot in _fireStore.collection('messages').snapshots()){\n+  //      // return all docs\n+  //      for(var message in snapShot.docs ){\n+  //        print(message.data());\n+  //      }\n+  //    }\n+  // }\n+\n+  // another way to listen to streams\n+    // _fireStore.collection('collectionPath').snapshots().listen((event) {\n+    //   for (var e in event.docs) {\n+    //     print(e.data());\n+    //   }\n+    // });\n+\n+// or by using stream builder in fire base website\n+\n+///21 How to convert stream to widgets by two steps\n+///1- just display data in widget\n+/// by using stream builder- it's able to rebuild itself each time new value comes from stream builder\n+///which helps automatically manage the streams state and disposal of the stream when it's no longer used within your app.\n+/// need two important 1-stream 2-builder\n+///             // stream- -> that where data comes from\n+            // builder build stargey --> provide the logic for the stream should actually do\n+            // each update will provide an Async snap shot which the most interaction with stream\n+            // StreamBuilder<QuerySnapshot>(\n+            //   stream: _fireStore.collection('messages').snapshots(),\n+            //   builder: (context, snapshot) {\n+            //     if (!snapshot.hasData) {\n+            //       return CircularProgressIndicator();\n+            //     }\n+            //     // now we have access to context and snap shot that contain streams\n+            //     // this snap shot cntain Query Snap Shot from fire base\n+            //     // to specify what kind of returnded data --> make stream builder of Query Snap Shot\n+            //     final messages = snapshot.data.docs;\n+            //     // return list of Query Document Snap Shot\n+            //     // so we must iterate in it to get all its elemnts\n+            //     List<Text> listWidget = [];\n+            //     for (var message in messages) {\n+            //       final mapData = message.data() as Map<String, dynamic>;\n+            //       final messageText = mapData['text'];\n+            //       final messageSnder = mapData['sender'];\n+            //       final textWidget = Text('$messageText from $messageSnder');\n+            //       // then add it to list\n+            //       listWidget.add(textWidget);\n+            //     }\n+\n+            //     return Column(\n+            //       children: listWidget,\n+            //     );\n+            //   },\n+            // ),\n+            //\n+            //       /// we use simple circular indicartor instead of progress HuD which provide when to spin or not by attribute isAyncCall\n+        /// 2- improving the styling and user Experience of our chat App\n+            /// first wrap widget to listview instead of usual column\n+            ///  so we can scroll it then wrap it to expanded to take available space \n+            /// then add some horiaontal and vertical padding \n+            /// then instead of using usual text --> make own styl by create new widget (MessageBubble)\n+            ///   // provide text and sender\n+  // final String mText,mSender;\n+  // MessageBubble({this.mText, this.mSender});\n+/// add some padding and by using materil widget ad color background\n+/// separte each seender and text and wrap them in clolumn\n+///  return Column(\n+    //   mainAxisAlignment: MainAxisAlignment.start,\n+    //   crossAxisAlignment: CrossAxisAlignment.end,\n+    //   children: [\n+    //     Text(\n+    //       mSender,\n+    //       style: TextStyle(fontSize: 10,color:Colors.black56),\n+                  // color to make it little lighter\n+\n+    //     ),\n+    //     Padding(\n+    //         padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),\n+    //         child: Material(\n+      /// give some shadow \n+    //             elevation: 5,\n+    /// to make it bubble\n+    //             borderRadius: BorderRadius.circular(30),\n+    //             color: Colors.lightBlue,\n+    //             child: Padding(\n+    //               padding: EdgeInsets.all(10),\n+    //               child: Text(\n+    //                 mText,\n+    //                 style: TextStyle(fontSize: 20, color: Colors.white),\n+    //               ),\n+    //             ))),\n+    //   ],\n+    // );\n+ ///refactor chat scren to be more readable to be bit simpler--> extract stream builder in separate widget\n+ ///put it in another file and put with it Message Bubble widget also\n+ ///pass to them _fireStore object\n+ /// we want to remove what user write in text filed after sending it and showing in our chat screen by using textEditor\n+ /// make final objct --> connect to text field --> // remove textController if not used to release resources\n+    // Clean up the controller when the widget is removed from the\n+    // widget tree.\n+ /// -->Finally, listen to the TextEditingController and call method that U want to implement\n+ /// when the text changes. Use the addListener() method for this purpose. put this in intiState\n+ /// but we only need to clear when user press send button so in send button -->call controller.clear();\n+ /// \n+ /// \n+ /// Completing improving the style to make different styl for loggined user and other user\n+ /// first send logged user ti message stream to check if thses document come from him or not to make different syle\n+ //         logIn: loggedIn,\n+ /// make bollean value --> true if this is logged in user and snt it to message bubble for different style\n+ /// because there is only two values --> one for logged in and other for others --> so we can make it by\n+ /// \n"
                },
                {
                    "date": 1633863818729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,333 +318,28 @@\n     // widget tree.\n  /// -->Finally, listen to the TextEditingController and call method that U want to implement\n  /// when the text changes. Use the addListener() method for this purpose. put this in intiState\n  /// but we only need to clear when user press send button so in send button -->call controller.clear();\n+ /// Note\n+ // use flexible widget if y want your widget to smalleer if there is littlee space\n+ // like in hero widget has its widgth but when u start writing --> vertial keyboard take additional space so\n+ //to make hero smmaller in this case wrap it in flexible widget .which is idfferent from extended widget whick full\n+ //the whole space of parent  \n  /// \n- /// \n  /// Completing improving the style to make different styl for loggined user and other user\n  /// first send logged user ti message stream to check if thses document come from him or not to make different syle\n  //         logIn: loggedIn,\n  /// make bollean value --> true if this is logged in user and snt it to message bubble for different style\n  /// because there is only two values --> one for logged in and other for others --> so we can make it by\n- /// \n-import 'package:firebase_core/firebase_core.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flash_chat/screens/welcome_screen.dart';\n-import 'package:flash_chat/screens/login_screen.dart';\n-import 'package:flash_chat/screens/registration_screen.dart';\n-import 'package:flash_chat/screens/chat_screen.dart';\n+ /// ternary operator to dtermine value depeemding on variable\n+ ///           isUser ? CrossAxisAlignment.end : CrossAxisAlignment.start,\n+///                 // put border for each side excet the side of right or left depending on the user\n+                // borderRadius: BorderRadius.only(\n+                //     bottomRight: Radius.circular(30),\n+                //     bottomLeft: Radius.circular(30),\n+                //     topLeft: Radius.circular(isUser ? 30 : 0),\n+                //     topRight: Radius.circular(isUser ? 0 : 30)),\n \n-// to initialize firebase\n-// make connection to it\n-Future<void> main() async {\n-  WidgetsFlutterBinding.ensureInitialized();\n-  await Firebase.initializeApp();\n-\n-  runApp(FlashChat());\n-}\n-\n-class FlashChat extends StatelessWidget {\n-  @override\n-  Widget build(BuildContext context) {\n-    return MaterialApp(\n-        debugShowCheckedModeBanner: false,\n-        // theme: ThemeData.light().copyWith(\n-        //   textTheme: TextTheme(\n-        //     bodyText2: TextStyle(color: Colors.black54),\n-        //   ),\n-\n-        initialRoute: WelcomeScreen.id,\n-        // if U use slash style\n-        //U must define route as / nothing or your app will be crashed\n-        routes: {\n-          WelcomeScreen.id: (context) => WelcomeScreen(),\n-          ChatScreen.id: (context) => ChatScreen(),\n-          LoginScreen.id: (context) => LoginScreen(),\n-          RegistrationScreen.id: (context) => RegistrationScreen(),\n-        });\n-  }\n-}\n-\n-///advice for all coming years\n-///if U change any thing or add in build.gradle\n-///and U get error search about solutions that change\n-/// classpath(\"com.android.tools.build:gradle:3.5.2\")\n-///because at probably this is problem because version can make conflict with other thing\n-\n-///8 REFACTOR\n-//if there are repeated widget --> U must refactor it to make your code clean and simple\n-//like we did with rounded button.\n-// if there is constant thing and u use it more than one -->\n-///must put it in constant file like decoration\n-//and u can change some properties in it by using key Word\n-/// COPY WITH()\n-\n-///9 hero animation which takes place in\n-/*\n- screen transition which is simplest way\n- from page 1 to page 2 but this require shared element\n- which known in android shared element transition\n- 1- hero animation require two hero in two pages\n- 2- shared tag property so flutter know what will be animated\n- 3- navigation between two pages\n-*/\n-/// fade transition to hide and  show elements or pop up or not\n-// custom animation --> change the background or size or each property or move something\n-//there are 4 main concept ticker-animation controller-animation value\n-//1- ticker look like in clock tick - something to count\n-//each tick of our clock that our animation will change\n-// it looks like flip book to make animation\n-//2- animation controller is the manager that set the values and tell animation to\n-// start or to stop or forward or reverse\n-//3-animation value usually from 0 to 1\n-// change upper bound  to 100 to use it\n-// this will change increasing\n-// to change in shape like a curve\n-/// curve animation as non linear\n-// https://flutter.dev/docs/development/ui/animations/tutorial\n-//  to know which curve must use\n-// https://api.flutter.dev/flutter/animation/Curves-class.html\n-//\n-/// Animation that translate between two values --> use tween Animation\n-// like starting color and end color\n-// this type is explicit\n-// there is type called implicit for container or not\n-// u have to mange life cycle of controller\n-// which all of them are code based animation\n-\n-///10 lesson with and mixin\n-// reusing class code meaning be able to inherit from that class.\n-// the normal way of it, is using extends but U can extend only one class\n-//class duck extends bird{}\n-//but there is another way to reuse part of classes's code\n-//U don't have to inherit from any body but U can reuse bits of code\n-//mixin canFly{ void fly(){print('can fly')}}\n-//mixin canSwim{ void fly(){print('can swim')}}\n-// class Duck extends animal with canFly, canSwim{ }\n-\n-///lesson with prepackaged. there are  a lot of available animation\n-// like flutter sequence animation. instance animation change color size and so on\n-// rubber, sprung and animated text kit to animate text\n-\n-// refactor  by using android studio flutter outline --> extract widget\n-/// put constant like decoration in constant not tob make spaghetti\n-/// to edit some constant use write with\n-// do some refactor . make it straight forward\n-\n-///11 Firebase cloud\n-// must apply all instruction for android or ios but ios requires mac and iphone to test it\n-// we need cloud_firebase and its authentication.\n-// available features of firebase --> https://github.com/FirebaseExtended/flutterfire\n-// must apply fireBaseCore first before U need\n-/// link for some problem faced because of android\n-///https://blog.londonappbrewery.com/troubleshooting-firebase-x-flutter-a974b2645689#003a\n-\n-///12 Authentication user with firebase\n-//first U get changed value of text field and store in a variable for registration and login screen\n-// must change som editing to be more best UI\n-// use call back on changed to get value user enter and save it in variable\n-// change property align in text field to align it in center\n-// override duration of text field to make suffix icon in it to change security of this text\n-// property called obscure text\n-// to make g-mail keyboard show on screen instead of custom one\n-///                       keyboardType:TextInputType.emailAddress,\n-/// make secure or not (جدعنه منى دى)\n-/*\n-if (secure == true) {\n-                                setState(() {\n-                                  secure = false;\n-                                  iconPassword = Icons.panorama_fish_eye;\n-                                });\n-                              } else {\n-                                setState(() {\n-                                  secure = true;\n-                                  iconPassword = Icons.remove_red_eye;\n-                                });\n-                              }\n-*/\n-\n-/// core firebase is responsible for connecting your application to Firebase.\n-// U must initialize first in Your main and us binding widget to ensure initialing\n-// U must enable register new user in in firebase authentication\n-\n-///(16) ## Authentication Users with firebase ##\n-/// sign in by existing user in log-in screen by using method sign-in email and password then wait for response\n-/// so if response not null so go to chat screen\n-/*\n-try {\n-                        final signedINUser =\n-                            await _auth.signInWithEmailAndPassword(\n-                                email: email, password: password);\n-                        if (signedINUser != null) {\n-                          Navigator.pushNamed(context, ChatScreen.id);\n-                        }\n-                      } on FirebaseAuthException catch (e) {\n-                        print(e.message);\n-                      }\n-                    },\n- */\n-/// in chat screen make method to retrieve last successful sign in\n-/// // method for get last successful e-mail signed-in\n-/// //make variable for logged in user\n-//   User loggedIn;\n-//  void getCurrentUser() async {\n-//     try {\n-//       final currentUser = _auth.currentUser;\n-//       if (currentUser != null) {\n-//         print('done' + loggedIn.email.toString());\n-//       }\n-//     } catch (e) {\n-//       print(e);\n-//     }\n-//   }\n-/// call this method in initState\n-///\n-///(17) ## make spinner upon registration or log in while getting or sending to firebase ##\n-/// using package -> modal_progress_hud 0.1.3\n-\n-///18 fire store (firebase cloud)\n-/// summary\n-/// if we hit send all messages will go to our DB which will find it in fire base data base.\n-/// this is no sql database while working in test mode but U must change it after testing to locked mode\n-/// collection is the thing that U care about it and in our case is Messages\n-/// make messages collection to store all messages and then create two fields (String,String) text and User\n-/// by current loggend in user send theses messages\n-/// make instance of fire store then send this to our store by using\n-///Implement send functionality.\n-//                       await _fireStore\n-//                           .collection('messages')\n-//                           .add({'text': messageText, 'sender': loggedIn.email});\n-// we can use this method getMessage()\n-// make method\n-  // void getMessages() async {\n-   /// get first collection reference then get this collection\n-     /// Snapshot is the result of the Future or Stream you are listening to in your FutureBuilder.\n-     /// stream tells us that the data is ready instad of calling it by my self\n-     ///  1/ we use only query at at time by this method\n-     /// To read a collection or document once,\n-     ///  call the Query.get or DocumentReference.get methods. \n-\n-\n-  //   final message = await _fireStore.collection('messages').get();\n-  //   // to get all document in collection\n-  //   for (var snapShot in message.docs) {\n-  //     print(snapShot.data());\n-  //   }\n-  // }\n-  /// {sender: ahmed@email.com, text: hifcgh}\n-\n-  // but to get always updated message --> U must call it again and again \n-  //so for eample check for nw messages two times and it returns future \n-  /// but the bettr approach to  do it instantly message, U want to get every updated messages.\n-  /// /// to listen to stream of data\n-  /// 2/ real time data\n-  /// notify for any new messages\n-  /// autoatically pushed to our app instead of calling it agagin and again .....\n-  /// going to listen to changes happenes in this collection listen to the stream\n-  ///     // snapshot return stream so we want one query --> use for each\n-    // then we want only doc --> use another for each\n-\n-  // void messageStream() async{\n-  //   // notify all documents in this collection\n-  // wait for until this complete\n-  //    await for( var snapShot in _fireStore.collection('messages').snapshots()){\n-  //      // return all docs\n-  //      for(var message in snapShot.docs ){\n-  //        print(message.data());\n-  //      }\n-  //    }\n-  // }\n-\n-  // another way to listen to streams\n-    // _fireStore.collection('collectionPath').snapshots().listen((event) {\n-    //   for (var e in event.docs) {\n-    //     print(e.data());\n-    //   }\n-    // });\n-\n-// or by using stream builder in fire base website\n-\n-///21 How to convert stream to widgets by two steps\n-///1- just display data in widget\n-/// by using stream builder- it's able to rebuild itself each time new value comes from stream builder\n-///which helps automatically manage the streams state and disposal of the stream when it's no longer used within your app.\n-/// need two important 1-stream 2-builder\n-///             // stream- -> that where data comes from\n-            // builder build stargey --> provide the logic for the stream should actually do\n-            // each update will provide an Async snap shot which the most interaction with stream\n-            // StreamBuilder<QuerySnapshot>(\n-            //   stream: _fireStore.collection('messages').snapshots(),\n-            //   builder: (context, snapshot) {\n-            //     if (!snapshot.hasData) {\n-            //       return CircularProgressIndicator();\n-            //     }\n-            //     // now we have access to context and snap shot that contain streams\n-            //     // this snap shot cntain Query Snap Shot from fire base\n-            //     // to specify what kind of returnded data --> make stream builder of Query Snap Shot\n-            //     final messages = snapshot.data.docs;\n-            //     // return list of Query Document Snap Shot\n-            //     // so we must iterate in it to get all its elemnts\n-            //     List<Text> listWidget = [];\n-            //     for (var message in messages) {\n-            //       final mapData = message.data() as Map<String, dynamic>;\n-            //       final messageText = mapData['text'];\n-            //       final messageSnder = mapData['sender'];\n-            //       final textWidget = Text('$messageText from $messageSnder');\n-            //       // then add it to list\n-            //       listWidget.add(textWidget);\n-            //     }\n-\n-            //     return Column(\n-            //       children: listWidget,\n-            //     );\n-            //   },\n-            // ),\n-            //\n-            //       /// we use simple circular indicartor instead of progress HuD which provide when to spin or not by attribute isAyncCall\n-        /// 2- improving the styling and user Experience of our chat App\n-            /// first wrap widget to listview instead of usual column\n-            ///  so we can scroll it then wrap it to expanded to take available space \n-            /// then add some horiaontal and vertical padding \n-            /// then instead of using usual text --> make own styl by create new widget (MessageBubble)\n-            ///   // provide text and sender\n-  // final String mText,mSender;\n-  // MessageBubble({this.mText, this.mSender});\n-/// add some padding and by using materil widget ad color background\n-/// separte each seender and text and wrap them in clolumn\n-///  return Column(\n-    //   mainAxisAlignment: MainAxisAlignment.start,\n-    //   crossAxisAlignment: CrossAxisAlignment.end,\n-    //   children: [\n-    //     Text(\n-    //       mSender,\n-    //       style: TextStyle(fontSize: 10,color:Colors.black56),\n-                  // color to make it little lighter\n-\n-    //     ),\n-    //     Padding(\n-    //         padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),\n-    //         child: Material(\n-      /// give some shadow \n-    //             elevation: 5,\n-    /// to make it bubble\n-    //             borderRadius: BorderRadius.circular(30),\n-    //             color: Colors.lightBlue,\n-    //             child: Padding(\n-    //               padding: EdgeInsets.all(10),\n-    //               child: Text(\n-    //                 mText,\n-    //                 style: TextStyle(fontSize: 20, color: Colors.white),\n-    //               ),\n\\ No newline at end of file\n-    //             ))),\n-    //   ],\n-    // );\n- ///refactor chat scren to be more readable to be bit simpler--> extract stream builder in separate widget\n- ///put it in another file and put with it Message Bubble widget also\n- ///pass to them _fireStore object\n- /// we want to remove what user write in text filed after sending it and showing in our chat screen by using textEditor\n- /// make final objct --> connect to text field --> // remove textController if not used to release resources\n-    // Clean up the controller when the widget is removed from the\n-    // widget tree.\n- /// -->Finally, listen to the TextEditingController and call method that U want to implement\n- /// when the text changes. Use the addListener() method for this purpose. put this in intiState\n- /// but we only need to clear when user press send button so in send button -->call controller.clear();\n+/// there is problem which is no order of added messages that newest recent message will show and sceenn update to show \n+/// to the new messagee --> add it to the bottom of list --> by steps\n+/// 1\n+// delete collection in firebase  so there is no intilazation\n"
                }
            ],
            "date": 1628077071547,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:flash_chat/screens/welcome_screen.dart';\nimport 'package:flash_chat/screens/login_screen.dart';\nimport 'package:flash_chat/screens/registration_screen.dart';\nimport 'package:flash_chat/screens/chat_screen.dart';\n\nvoid main() => runApp(FlashChat());\n\nclass FlashChat extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData.light().copyWith(\n        textTheme: TextTheme(\n          bodyText2: TextStyle(color: Colors.black54),\n        ),\n      ),\n      home: WelcomeScreen(),\n    );\n  }\n}\n"
        }
    ]
}